setString("Quitter sans rien faire", $menuoption1)
setString("Sauvegarder BOOT0, BOOT1, PRODINFO et PRODINFOF", $menuoption2)
setString("Restaurer avec suppression de données", $menuoption3)
setString("Restaurer sans suppression de données", $menuoption4)
setString("Restaurer seulement les partitions BOOT0, BOOT1 et BCPKG2-*", $menuoption5)
setString("Supprimer le contrôle parental", $menuoption6)
setString("Réinitialiser la console", $menuoption7)

setString("Revenir au menu principal", $menuoption8)
setString("Utiliser ce répertoire", $menuoption9)
setString("Revenir à la racine de la SD", $menuoption10)
setString("Remonter d'un répertoire", $menuoption11)

setString("                                                                              ", $clearLine)

@mmcAlreadyConnected = setInt(0);

@reloadMenuLoop = getPosition()
clearscreen()
@explorerIsCalled = setInt(0);
setString("sd:/cdj_package_files", $restoreFolderPath)
setString("sd:/dump", $dumpFolderPath)
setColor("WHITE")
printf("TegraScript ChoiDuJour  package restoration - SYSMMC")
printf("Par shadow256")
printf("")
printf("Sélectionner quoi faire.")
printf("")
printf("")

	setPrintPos(0, 39)
	printf("HAUT/BAS/VOL+/VOL- : se déplacer | A/POWER : Valider")
@selection = setInt(1)
@maxSelection = setInt(7)

@optionLoop = getPosition()
setPrintPos(0, 10)
@current = setInt(1)

@drawLoop = getPosition()
setColor("WHITE")
setStringIndex(@current, $toDraw)
if (@selection, ==, @current){
	setColor("RED")
}
printf($toDraw)
@current = math(@current, +, 1)
if (@current, <=, @maxSelection){
	goto(@drawLoop)
}
pause()
if (@BTN_DOWN){
	if (@selection, <, @maxSelection){
		@selection = math(@selection, +, 1)
	}
}
if (@BTN_UP){
	if (@selection, >, 1){
		@selection = math(@selection, -, 1)
	}
}
if (@BTN_A, ==, 0){
	goto(@optionLoop)
}

if (@selection, ==, 1){
	exit()
}
if (@selection, ==, 2){
	@checkInput = setInt(4);
	clearscreen()
	printf("Appuyez sur le bouton VOL+ pour sauvegarder les fichiers dans le dossier de votre choix")
	printf("Appuyez sur n'importe quel autre bouton pour sauvegarder les fichiers dans le dossier", $dumpFolderPath)
	pause()
	if (@BTN_VOL+){
		setString("Sélection du dossier de sauvegarde", $explorerTitle)
		@explorerIsCalled = setInt(1)
	}
}
if (@selection, ==, 3){
	@checkInput = setInt(1);
	clearscreen()
	printf("Appuyez sur le bouton VOL+ pour sélectionner le dossier contenant le   package de ChoiDuJour")
	printf("Appuyez sur n'importe quel autre bouton pour  utiliser le package de ChoiDuJour situé dans le dossier", $restoreFolderPath)
	pause()
	if (@BTN_VOL+){
		setString("Sélection du dossier du package de ChoiDuJour", $explorerTitle)
		@explorerIsCalled = setInt(1)
	}
}
if (@selection, ==, 4){
	@checkInput = setInt(2);
		clearscreen()
	printf("Appuyez sur le bouton VOL+ pour sélectionner le dossier contenant le   package de ChoiDuJour")
	printf("Appuyez sur n'importe quel autre bouton pour  utiliser le package de ChoiDuJour situé dans le dossier", $restoreFolderPath)
	pause()
	if (@BTN_VOL+){
		setString("Sélection du dossier du package de ChoiDuJour", $explorerTitle)
		@explorerIsCalled = setInt(1)
	}
}
if (@selection, ==, 5){
	@checkInput = setInt(3);
		clearscreen()
	printf("Appuyez sur le bouton VOL+ pour sélectionner le dossier contenant le   package de ChoiDuJour")
	printf("Appuyez sur n'importe quel autre bouton pour  utiliser le package de ChoiDuJour situé dans le dossier", $restoreFolderPath)
	pause()
	if (@BTN_VOL+){
		setString("Sélection du dossier du package de ChoiDuJour", $explorerTitle)
		@explorerIsCalled = setInt(1)
	}
}
if (@selection, ==, 6){
	clearscreen()
	printf("Suppression du contrôle parental")
	printf("")
	printf("Appuyez sur  VOL+ pour supprimer le contrôle parental ou appuyez sur n'importe quelle autre touche pour revenir au menu")
	printf("")
	pause() 
	@checkInput = setInt(0);
	if (@BTN_VOL+){
		@checkInput = setInt(1);
	}
	if (@checkInput, == , 0){
		goto(@reloadMenuLoop)
	}
	if (@mmcAlreadyConnected, ==, 0){
		printf("Montage de  SYSMMC...") 
		mmc_connect("SYSMMC")
		if (@RESULT){
			setColor("RED")
			printf("La sysnand n'a pas pu être initialisée!")
			printf("Ceci peut être dû à une nand deffectueuse ou des Bis Keys incorrectes.")
			printf("Si vous exécutez ce script sur une console mais que la nand ne lui correspond pas, ce script ne peut pas fonctionner non plus.")
			printf("")
			setColor("WHITE")
			printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
			pause()
			goto(@reloadMenuLoop)
		}
		@mmcAlreadyConnected = setInt(1)
	}
	printf("Suppression du contrôle parental")
	fs_del("emmc:/save/8000000000000100")
	setColor("GREEN")
	printf("")
	printf("")
	printf("Opération terminée avec succès, Appuyez sur n'importe quelle touche pour revenir au menu.")
	pause()
	goto(@reloadMenuLoop)
}
if (@selection, ==, 7){
	clearscreen()
	printf("Réinitialisation de la console")
	printf("")
	printf("Appuyez sur VOL+ pour confirmer la suppression des données ou appuyez sur n'importe quelle autre touche pour revenir au menu")
	printf("")
	pause() 
	@checkInput = setInt(0);
	if (@BTN_VOL+){
		@checkInput = setInt(1);
	}
	if (@checkInput, == , 0){
		goto(@reloadMenuLoop)
	}
	if (@mmcAlreadyConnected, ==, 0){
		printf("Montage de  SYSMMC...") 
		mmc_connect("SYSMMC")
		if (@RESULT){
			setColor("RED")
			printf("La sysnand n'a pas pu être initialisée!")
			printf("Ceci peut être dû à une nand deffectueuse ou des Bis Keys incorrectes.")
			printf("Si vous exécutez ce script sur une console mais que la nand ne lui correspond pas, ce script ne peut pas fonctionner non plus.")
			printf("")
			setColor("WHITE")
			printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
			pause()
			goto(@reloadMenuLoop)
		}
		@mmcAlreadyConnected = setInt(1)
	}
	printf("Suppression des données")
	printf("")
	mmc_mount("SYSTEM")
	if (@RESULT){
		setColor("RED")
		printf("La partition SYSTEM n'a pas pu être montée!")
		printf("Ceci peut être dû à une nand deffectueuse ou des Bis Keys incorrectes.")
		printf("Si vous exécutez ce script sur une console mais que la nand ne lui correspond pas, ce script ne peut pas fonctionner non plus.")
		printf("")
		setColor("WHITE")
		printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
		pause()
		goto(@reloadMenuLoop)
	}
	setString("emmc:/save/", $basePath)
	@count = setInt(1)
	printf("Suppression de données de la partition SYSTEM")
	printf("")
	fs_delRecursive("emmc:/saveMeta")
	fs_mkdir("emmc:/saveMeta")
	fs_openDir("emmc:/save")
	@LOOP = getPosition()
	fs_readDir()
	if (@ISDIRVALID){
		combineStrings($basePath, $FILENAME, $path)
		setPrintPos(0, 17)
		@check = compareStrings($FILENAME, "8000000000000120")
		if (@check){
			goto(@LOOP)
		}
		@check = compareStrings($FILENAME, "80000000000000d1")
		if (@check){
			goto(@LOOP)
		}
		@check = compareStrings($FILENAME, "8000000000000047")
		if (@check){
			goto(@LOOP)
		}
		@count = math(@count, "+", 1)
		printf(@count, ": ", $FILENAME)
		fs_del($path)
		goto(@LOOP)
	}
	mmc_mount("USER")
	if (@RESULT){
		setColor("RED")
		printf("La partition USER n'a pas pu être montée!")
		printf("Ceci peut être dû à une nand deffectueuse ou des Bis Keys incorrectes.")
		printf("Si vous exécutez ce script sur une console mais que la nand ne lui correspond pas, ce script ne peut pas fonctionner non plus.")
		printf("")
		setColor("WHITE")
		printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
		pause()
		goto(@reloadMenuLoop)
	}
	printf("Suppression de données de la partition USER")
	printf("")
	printf("emmc:/Contents")
	fs_delRecursive("emmc:/Contents")
	fs_mkdir("emmc:/Contents")
	printf("emmc:/Contents/placehld")
	fs_mkdir("emmc:/Contents/placehld")
	fs_mkdir("emmc:/Contents/registered")
	printf("emmc:/save")
	fs_delRecursive("emmc:/save")
	fs_mkdir("emmc:/save")
	printf("emmc:/saveMeta")
	fs_delRecursive("emmc:/saveMeta")
	fs_mkdir("emmc:/saveMeta")
	printf("emmc:/temp")
	fs_delRecursive("emmc:/temp")
	fs_mkdir("emmc:/temp")
	setColor("GREEN")
	printf("")
	printf("")
	printf("Opération terminée avec succès, Appuyez sur n'importe quelle touche pour revenir au menu.")
	pause()
	goto(@reloadMenuLoop)
}

@explorerCall = getPosition()
if (@explorerIsCalled, ==, 1){
	setString("sd:/", $currentFolder)
	@loadFolderLoop = getPosition()
		clearscreen()
	setColor("WHITE")
	printf($explorerTitle)
	printf("-------------------------------------------------------------------------------")
	setPrintPos(0, 40)
	printf("HAUT/BAS/Gauche/Droite/VOL+/VOL- : se déplacer | A/POWER : Valider")
	printf("B : Dossier parent | X : Recharger dossier | Y : retour Racine SD")
	setPrintPos(0, 3)
	@verifParentDirLoop = getPosition()
	@noParentDir = setInt(0)
	compareStrings($currentFolder, "sd:/")
	if (@RESULT, ==, 1){
		@noParentDir = setInt(1)
	}
	@currentFolderLen = stringLength($currentFolder)
	@currentFolderVerif = setInt(4)
	setString("sd:/", $parentDir)
	setString("", $tempActual)
	@slashEncountered = setInt(0)
	@verifParentDirLoop = getPosition()
	if (@noParentDir, ==, 0){
		if (@currentFolderVerif, <, @currentFolderLen){
			subString($currentFolder, @currentFolderVerif, 1, $verifiedChar)
			compareStrings($verifiedChar, "/")
			if (@RESULT, ==, 1){
				@slashEncountered = setInt(1)
			}
			if (@slashEncountered, ==, 0){
				combineStrings($tempActual, $verifiedChar, $tempActual)
			}
			if (@slashEncountered, ==, 1){
				combineStrings($parentDir, $tempActual, $parentDir)
				combineStrings($parentDir, "/", $parentDir)
				setString("", $tempActual)
				@slashEncountered = setInt(0)
			}
			@currentFolderVerif = math(@currentFolderVerif, +, 1)
			goto(@verifParentDirLoop)
		}
		compareStrings($parentDir, "sd:/")
		if (@RESULT, ==, 0){
		@supressLastSlash = stringLength($parentDir)
		@supressLastSlash = math(@supressLastSlash, -, 1)
		subString($parentDir, 0, @supressLastSlash, $parentDir)
		}
	}
	@foldersNumber = setInt(0)
	fs_openDir($currentFolder)
	@countLoop = getPosition()
	if (@ISDIRVALID, ==, 1){
		fs_readDir()
		if (@ISDIRVALID, ==, 1){
			if (@ISDIR, ==, 1){
			@fileNameCount = stringLength($FILENAME)
			if (@fileNameCount, >, 79){
				setColor("RED")
				printf("")
				printf("Un dossier dont le nom contient plus de 79 caractères a été détecté, l'affichage du dossier choisi est impossible pour l'instant.")
				printf("")
				printf("Appuyez sur n'importe quelle  touche pour revenir au menu.")
				pause()
				goto(@reloadMenuLoop)
			}
				@foldersNumber = math(@foldersNumber, +, 1)
			}
		}
		goto(@countLoop)
	}
	fs_closeDir()
	setString("", $selectedFolder)
	@minIndexToPrint = setInt(8)
	@maxIndexToPrint = setInt(11)
	@firstLineDisplay = setInt(3)
	@middleLineDisplay = setInt(14)
	@lastLineDisplay = setInt(28)
	@maxSelection = math(@maxIndexToPrint, +, @foldersNumber)
	@firstLine = setInt(@minIndexToPrint)
	@middleLineDesc = math(@middleLineDisplay, +, @minIndexToPrint)
	@middleLineAsc = math(@maxSelection, -, @middleLineDisplay)
	@lastLine = math(@lastLineDisplay, +, @minIndexToPrint)
	@firstLineLimit = setInt(@firstLine)
	@middleLineDescLimit = setInt(@middleLineDesc)
	@middleLineAscLimit = setInt(@middleLineAsc)
	@middleLineLimit = math(@middleLineAsc, -, @middleLineDesc)
	@lastLineLimit = setInt(@lastLine)
	@selection = setInt(@minIndexToPrint)
	@optionLoop2 = getPosition()
	setPrintPos(0, @firstLineDisplay)
	@printedLine = setInt(@firstLineDisplay)
	@current = setInt(@firstLine)
	@drawLoop2 = getPosition()
	if (@current, <=, @maxIndexToPrint){
		setColor("WHITE")
		setStringIndex(@current, $toDraw)
		if (@selection, ==, @current){
			setColor("RED")
		}
		printf($clearLine)
		setPrintPos(0, @printedLine)
		printf($toDraw)
		@printedLine = math(@printedLine, +, 1)
		@current = math(@current, +, 1)
		if (@current, <=, @maxIndexToPrint){
			goto(@drawLoop2)
		}
	}
	math(@current, -, 1)
	if (@RESULT, ==, @maxIndexToPrint){
		printf($clearLine)
		@printedLine = math(@printedLine, +, 1)
	}
	fs_openDir($currentFolder)
	@count = setInt(@maxIndexToPrint)
	@drawFolderLoop = getPosition()
	setColor("WHITE")
	if (@ISDIRVALID, ==, 1){
		fs_readDir()
		if (@ISDIRVALID, ==, 1){
			if (@ISDIR, ==, 1){
				@count = math(@count, +, 1)
				if (@count, >=, @firstLine){
					if (@selection, ==, @current){
						setString($FILENAME, $selectedFolder)
						setColor("RED")
					}
					printf($clearLine)
					setPrintPos(0, @printedLine)
					printf($FILENAME)
					@printedLine = math(@printedLine, +, 1)
					@current = math(@current, +, 1)
				}
			}
		}
		if (@current, <=, @lastLine){
			goto(@drawFolderLoop)
		}
	}
	fs_closeDir()
	printf("-------------------------------------------------------------------------------")
	printf("")
	setColor("GREEN")
	printf($currentFolder)
	setColor("WHITE")
	pause()
	if (@BTN_DOWN){
		if (@selection, <, @maxSelection){
			@selection = math(@selection, +, 1)
		}
		if (@selection, >, @middleLineDesc){
			if (@selection, <=, @middleLineAsc){
			@firstLine = math(@firstLine, +, 1)
			@lastLine = math(@lastLine, +, 1)
			}
		}
		@current = setInt(@firstLine)
	}
	if (@BTN_VOL-){
		if (@selection, <, @maxSelection){
			@selection = math(@selection, +, 1)
		}
		if (@selection, >, @middleLineDesc){
			if (@selection, <=, @middleLineAsc){
			@firstLine = math(@firstLine, +, 1)
			@lastLine = math(@lastLine, +, 1)
			}
		}
		@current = setInt(@firstLine)
	}
	if (@BTN_RIGHT){
		if (@selection, <, @maxSelection){
			@selection = math(@selection, +, @middleLineDisplay)
			if (@selection, >, @maxSelection){
				@selection = setInt(@maxSelection)
			}
		}
		if (@selection, >, @middleLineDesc){
			if (@selection, <=, @middleLineAsc){
				@firstLine = math(@firstLine, +, @middleLineDisplay)
				@lastLine = math(@lastLine, +, @middleLineDisplay)
			}
			if (@selection, >, @middleLineAsc){
				@firstLine = math(@maxSelection, -, @lastLineDisplay)
				@lastLine = setInt(@maxSelection)
			}
		}
		@current = setInt(@firstLine)
	}
	if (@BTN_UP){
		if (@selection, >, @minIndexToPrint){
			@selection = math(@selection, -, 1)
		}
		if (@selection, <, @middleLineAsc){
			if (@selection, >=, @middleLineDesc){
			@firstLine = math(@firstLine, -, 1)
			@lastLine = math(@lastLine, -, 1)
			}
		}
		@current = setInt(@firstLine)
	}
	if (@BTN_VOL+){
		if (@selection, >, @minIndexToPrint){
			@selection = math(@selection, -, 1)
		}
		if (@selection, <, @middleLineAsc){
			if (@selection, >=, @middleLineDesc){
			@firstLine = math(@firstLine, -, 1)
			@lastLine = math(@lastLine, -, 1)
			}
		}
		@current = setInt(@firstLine)
	}
	if (@BTN_LEFT){
		if (@selection, >, @minIndexToPrint){
			@selection = math(@selection, -, @middleLineDisplay)
			if (@selection, <, @minIndexToPrint){
				@selection = setInt(@minIndexToPrint)
			}
		}
		if (@selection, <, @middleLineAsc){
			if (@selection, >=, @middleLineDesc){
				@firstLine = math(@firstLine, -, @middleLineDisplay)
				@lastLine = math(@lastLine, -, @middleLineDisplay)
			}
			if (@selection, <, @middleLineDesc){
				@firstLine = setInt(@minIndexToPrint)
				@lastLine = setInt(@lastLineLimit)
			}
		}
		@current = setInt(@firstLine)
	}
	if (@BTN_B){
		@selection = setInt(9)
		@BTN_A = setInt(1)
	}
		if (@BTN_Y){
		@selection = setInt(8)
		@BTN_A = setInt(1)
	}
	if (@BTN_X){
		goto(@loadFolderLoop)
	}
		if (@BTN_POWER){
		@BTN_A = setInt(1)
	}
	if (@BTN_A, ==, 0){
		goto(@optionLoop2)
	}
	if (@selection, ==, 6){
		goto(@reloadMenuLoop)
	}
	if (@selection, ==, 8){
		setString("sd:/", $currentFolder)
		goto(@loadFolderLoop)
	}
	if (@selection, ==, 9){
		setString($parentDir, $currentFolder)
		goto(@loadFolderLoop)
	}
	if (@selection, >, 9){
		compareStrings($currentFolder, "sd:/")
		if (@RESULT, ==, 1){
			combineStrings($currentFolder, $selectedFolder, $tempCurrentFolder)
			setString($tempCurrentFolder, $currentFolder)
			goto(@loadFolderLoop)
		}
		combineStrings($currentFolder, "/", $tempCurrentFolder)
		combineStrings($tempCurrentFolder, $selectedFolder, $currentFolder)
		goto(@loadFolderLoop)
	}
}

if (@explorerIsCalled, ==, 1){
	compareStrings($currentFolder, "sd:/")
	if (@RESULT, ==, 1){
		setString("sd:", $currentFolder)
	}
	setString($currentFolder, $restoreFolderPath)
	setString($currentFolder, $dumpFolderPath)
	setString("sd:/", $currentFolder)
}
@supressLastSlash = stringLength($restoreFolderPath)
@supressLastSlash = math(@supressLastSlash, -, 1)
subString($restoreFolderPath, @supressLastSlash, 1, $tempChar)
compareStrings($tempChar, "/")
if (@RESULT, ==, 1){
@supressLastSlash = math(@supressLastSlash, -, 1)
subString($restoreFolderPath, 0, @supressLastSlash, $restoreFolderPath)
}
@supressLastSlash = stringLength($dumpFolderPath)
@supressLastSlash = math(@supressLastSlash, -, 1)
subString($dumpFolderPath, @supressLastSlash, 1, $tempChar)
compareStrings($tempChar, "/")
if (@RESULT, ==, 1){
@supressLastSlash = math(@supressLastSlash, -, 1)
subString($dumpFolderPath, 0, @supressLastSlash, $dumpFolderPath)
}
combineStrings($restoreFolderPath, "/BOOT0.bin", $BOOT0Path)
combineStrings($restoreFolderPath, "/BOOT1.bin", $BOOT1Path)
combineStrings($restoreFolderPath, "/BCPKG2-1-Normal-Main.bin", $BCPKG1Path)
combineStrings($restoreFolderPath, "/BCPKG2-2-Normal-Sub.bin", $BCPKG2Path)
combineStrings($restoreFolderPath, "/BCPKG2-3-SafeMode-Main.bin", $BCPKG3Path)
combineStrings($restoreFolderPath, "/BCPKG2-4-SafeMode-Sub.bin", $BCPKG4Path)
combineStrings($dumpFolderPath, "/BOOT0", $BOOT0DumpPath)
combineStrings($dumpFolderPath, "/BOOT1", $BOOT1DumpPath)
combineStrings($dumpFolderPath, "/PRODINFO.bin", $PRODINFODumpPath)
combineStrings($dumpFolderPath, "/PRODINFOF.bin", $PRODINFOFDumpPath)

clearscreen()
setColor("WHITE")
if (@checkInput, ==, 4){
	if (@mmcAlreadyConnected, ==, 0){
		printf("Montage de  SYSMMC...") 
		mmc_connect("SYSMMC")
		if (@RESULT){
			setColor("RED")
			printf("La sysnand n'a pas pu être initialisée!")
			printf("Ceci peut être dû à une nand deffectueuse ou des Bis Keys incorrectes.")
			printf("Si vous exécutez ce script sur une console mais que la nand ne lui correspond pas, ce script ne peut pas fonctionner non plus.")
			printf("")
			setColor("WHITE")
			printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
			pause()
			goto(@reloadMenuLoop)
		}
		@mmcAlreadyConnected = setInt(1);
	}
	printf("Début de la sauvegarde des éléments  sur la carte SD")
	@dumpFileExist = setInt(0);
	fs_exists($BOOT0DumpPath)
	if (@RESULT){
		@dumpFileExist = setInt(1);
	}
	fs_exists($BOOT1DumpPath)
	if (@RESULT){
		@dumpFileExist = setInt(1);
	}
	fs_exists($PRODINFODumpPath)
	if (@RESULT){
		@dumpFileExist = setInt(1);
	}
	fs_exists($PRODINFOFDumpPath)
	if (@RESULT){
		@dumpFileExist = setInt(1);
	}
	if (@dumpFileExist, ==, 1){
		setColor("RED")
		printf("")
		printf("Des fichiers de dump existent déjà dans le dossier", $dumpFolderPath, ", souhaitez-vous les remplacer?")
		printf("")
		setColor("WHITE")
		printf("Appuyez sur VOL+ pour confirmer la suppression ou sur n'importe quelle autre touche pour revenir au menu.")
		pause()
		if (@BTN_VOL+, ==, 0){
			goto(@reloadMenuLoop)
		}
	}
	printf("")
	printf("Sauvegarde en cours...")
	fs_del($BOOT0DumpPath)
	fs_del($BOOT1DumpPath)
	fs_del($PRODINFODumpPath)
	fs_del($PRODINFOFDumpPath)
	fs_mkdir($dumpFolderPath)
	mmc_dumpPart("BOOT", $dumpFolderPath)
	mmc_dumpPart("PRODINFO", $PRODINFODumpPath)
	mmc_dumpPart("PRODINFOF", $PRODINFOFDumpPath)
		@BOOT0DumpFileExist = setInt(0);
@BOOT1DumpFileExist = setInt(0);
@PRODINFODumpFileExist = setInt(0);
@PRODINFOFDumpFileExist = setInt(0);
	fs_exists($BOOT0DumpPath)
	if (@RESULT){
		@BOOT0DumpFileExist = setInt(1);
	}
	fs_exists($BOOT1DumpPath)
	if (@RESULT){
		@BOOT1DumpFileExist = setInt(1);
	}
	fs_exists($PRODINFODumpPath)
	if (@RESULT){
		@PRODINFODumpFileExist = setInt(1);
	}
	fs_exists($PRODINFOFDumpPath)
	if (@RESULT){
		@PRODINFOFDumpFileExist = setInt(1);
	}
	if (@BOOT0DumpFileExist, ==, 1){
		if (@BOOT1DumpFileExist, ==, 1){
			if (@PRODINFODumpFileExist, ==, 1){
				if (@PRODINFOFDumpFileExist, ==, 1){
					setColor("GREEN")
					printf("")
					printf("")
					printf("Sauvegarde terminée, les fichiers se trouvent dans le dossier", $dumpFolderPath, ", pensez à les garder de côté.")
					printf("")
					setColor("WHITE")
					printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
					pause()
					goto(@reloadMenuLoop)
				}
			}
		}
	}
	setColor("RED")
	printf("")
	printf("Une erreur s'est produite durant la sauvegarde, vérifiez l'espace disponible sur votre SD.")
	printf("")
	setColor("WHITE")
	printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
	pause()
	goto(@reloadMenuLoop)
}

printf("Début de la restauration")
printf("")
@restoreFileExist = setInt(1);
fs_exists($BOOT0Path)
if (@RESULT, ==, 0){
@restoreFileExist = setInt(0);
}
fs_exists($BOOT1Path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
fs_exists($BCPKG1Path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
fs_exists($BCPKG2Path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
fs_exists($BCPKG3Path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
fs_exists($BCPKG4Path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
combineStrings($restoreFolderPath, "/SYSTEM/Contents", $SYSTEM_Contents_path)
fs_exists($SYSTEM_Contents_path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
if (@restoreFileExist, ==, 1){
	fs_openDir($SYSTEM_Contents_path)
	if (@ISDIRVALID, ==, 0){
		@restoreFileExist = setInt(0);
	}
	if (@ISDIRVALID, ==, 0){
		fs_closeDir()
	}
}
combineStrings($restoreFolderPath, "/SYSTEM/save", $SYSTEM_save_path)
fs_exists($SYSTEM_save_path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
if (@restoreFileExist, ==, 1){
	fs_openDir($SYSTEM_save_path)
	if (@ISDIRVALID, ==, 0){
		@restoreFileExist = setInt(0);
	}
	if (@ISDIRVALID, ==, 1){
		fs_closeDir()
	}
}
if (@restoreFileExist, ==, 0){
	setColor("RED")
	printf("")
	printf("Certains fichiers ou dossiers sont manquants dans le dossier", $restoreFolderPath, ", le script ne peut continuer.")
	printf("")
	setColor("WHITE")
	printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
	pause()
	goto(@reloadMenuLoop)
}
if (@checkInput, ==, 1){
	setColor("RED")
	printf("Attention: Toutes les données de la nand seront perdues")
	setColor("WHITE")
	printf("")
	printf("Appuyez sur VOL+ pour confirmer ou sur n'importe quelle autre touche pour revenir au menu.")
	pause()
	if (@BTN_VOL+, ==, 0){
		goto(@reloadMenuLoop)
	}
}

if (@mmcAlreadyConnected, ==, 0){
	printf("Montage de  SYSMMC...") 
	mmc_connect("SYSMMC")
	if (@RESULT){
		setColor("RED")
		printf("La sysnand n'a pas pu être initialisée!")
		printf("Ceci peut être dû à une nand deffectueuse ou des Bis Keys incorrectes.")
		printf("Si vous exécutez ce script sur une console mais que la nand ne lui correspond pas, ce script ne peut pas fonctionner non plus.")
		printf("")
		setColor("WHITE")
		printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
		pause()
		goto(@reloadMenuLoop)
	}
	@mmcAlreadyConnected = setInt(1)
}
if (@checkInput, <, 3){
	mmc_mount("SYSTEM")
	if (@RESULT){
		setColor("RED")
		printf("La partition SYSTEM n'a pas pu être montée!")
		printf("Ceci peut être dû à une nand deffectueuse ou des Bis Keys incorrectes.")
		printf("Si vous exécutez ce script sur une console mais que la nand ne lui correspond pas, ce script ne peut pas fonctionner non plus.")
		printf("")
		setColor("WHITE")
		printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
		pause()
		goto(@reloadMenuLoop)
	}
	mmc_mount("USER")
	if (@RESULT){
		setColor("RED")
		printf("La partition USER n'a pas pu être montée!")
		printf("Ceci peut être dû à une nand deffectueuse ou des Bis Keys incorrectes.")
		printf("Si vous exécutez ce script sur une console mais que la nand ne lui correspond pas, ce script ne peut pas fonctionner non plus.")
		printf("")
		setColor("WHITE")
		printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
		pause()
		goto(@reloadMenuLoop)
	}
}

printf("")
printf("Restauration des partitions BOOT0, BOOT1 et BCPKG2-*...")
printf("")
mmc_restorePart($BOOT0Path)
mmc_restorePart($BOOT1Path)
mmc_restorePart($BCPKG1Path)
mmc_restorePart($BCPKG2Path)
mmc_restorePart($BCPKG3Path)
mmc_restorePart($BCPKG4Path)
if (@checkInput, ==, 3){
	setColor("GREEN")
	printf("")
	printf("")
	printf("Oppération terminée avec succès!")
	printf("")
	setColor("WHITE")
	printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
	pause()
	goto(@reloadMenuLoop)
}

printf("Restauration de la partition SYSTEM...")
mmc_mount("SYSTEM")
if (@RESULT){
	setColor("RED")
	printf("La partition SYSTEM n'a pas pu être montée!")
	printf("")
	setColor("WHITE")
	printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
	pause()
	goto(@reloadMenuLoop)
}
if (@checkInput, ==, 1){
	fs_delRecursive("emmc:/Contents")
	fs_delRecursive("emmc:/save")
	fs_delRecursive("emmc:/saveMeta")
	fs_del("emmc:/PRF2SAFE.RCV")
}
fs_copyRecursive($SYSTEM_Contents_path, "emmc:/")
fs_copyRecursive($SYSTEM_save_path, "emmc:/")
if (@checkInput, ==, 1){
	printf("")
	printf("Restauration de la partition USER...")
	mmc_mount("USER")
	if (@RESULT){
		setColor("RED")
		printf("La partition USER n'a pas pu être montée!")
		printf("")
		setColor("WHITE")
		printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
		pause()
		goto(@reloadMenuLoop)
	}
	fs_delRecursive("emmc:/Album")
	fs_delRecursive("emmc:/Contents")
	fs_delRecursive("emmc:/save")
	fs_delRecursive("emmc:/saveMeta")
	fs_delRecursive("emmc:/temp")
	fs_del("emmc:/PRF2SAFE.RCV")
	fs_mkdir("emmc:/Album")
	fs_mkdir("emmc:/Contents")
	fs_mkdir("emmc:/Contents/placehld")
	fs_mkdir("emmc:/Contents/registered")
	fs_mkdir("emmc:/save")
	fs_mkdir("emmc:/saveMeta")
	fs_mkdir("emmc:/temp")
}
combineStrings($restoreFolderPath, "/microSD", $microSD_restoreFolderPath)
fs_exists($microSD_restoreFolderPath)
if (@RESULT){
	fs_openDir($microSD_restoreFolderPath)
	if (@ISDIRVALID, ==, 1){
		fs_readDir()
		setString("", $temp_microSD_restore_file)
		@hekateConfigFileFounded = setInt(0)
		combineStrings($microSD_restoreFolderPath, "/", $temp_microSD_restore_file)
		combineStrings($temp_microSD_restore_file, $FILENAME, $temp_microSD_restore_file)
		compareStrings($FILENAME, "hekate_ipl.ini")
		if (@RESULT, ==, 1){
			@hekateConfigFileFounded = setInt(1)
		}
		if (@hekateConfigFileFounded, ==, 1){
			fs_exists("sd:/bootloader")
			if (@RESULT, ==, 0){
				fs_mkdir("sd:/bootloader")
			}
			fs_exists("sd:/bootloader/hekate_ipl.ini")
			if (@RESULT, ==, 1){
				fs_copy("sd:/bootloader/hekate_ipl.ini", "sd:/bootloader/hekate_ipl.ini.bak")
			}
			fs_copy($temp_microSD_restore_file, "sd:/bootloader/hekate_ipl.ini")
		}
		if (@hekateConfigFileFounded, ==, 0){
			setString("", $tempKipFile)
			combineStrings("sd:/", $FILENAME, $tempKipFile)
			fs_copy($temp_microSD_restore_file, $tempKipFile)
		}
		fs_readDir()
		setString("", $temp_microSD_restore_file)
		@hekateConfigFileFounded = setInt(0)
		combineStrings($microSD_restoreFolderPath, "/", $temp_microSD_restore_file)
		combineStrings($temp_microSD_restore_file, $FILENAME, $temp_microSD_restore_file)
		compareStrings($FILENAME, "hekate_ipl.ini")
		if (@RESULT, ==, 1){
			@hekateConfigFileFounded = setInt(1)
		}
		if (@hekateConfigFileFounded, ==, 1){
			fs_exists("sd:/bootloader")
			if (@RESULT, ==, 0){
				fs_mkdir("sd:/bootloader")
			}
			fs_exists("sd:/bootloader/hekate_ipl.ini")
			if (@RESULT, ==, 1){
				fs_copy("sd:/bootloader/hekate_ipl.ini", "sd:/bootloader/hekate_ipl.ini.bak")
			}
			fs_copy($temp_microSD_restore_file, "sd:/bootloader/hekate_ipl.ini")
		}
		if (@hekateConfigFileFounded, ==, 0){
			setString("", $tempKipFile)
			combineStrings("sd:/", $FILENAME, $tempKipFile)
			fs_copy($temp_microSD_restore_file, $tempKipFile)
		}
	}
	fs_closeDir()
}

setColor("GREEN")
printf("")
printf("")
printf("Opération terminée avec succès!")
printf("")
setColor("WHITE")
printf("Appuyez sur n'importe quelle touche pour revenir au menu.")
pause()
goto(@reloadMenuLoop)
exit()