JoyY = 0x1
JoyX = 0x2
JoyB = 0x4
JoyA = 0x8
JoyL = 0x400000
JoyR = 0x40
JoyZL = 0x800000
JoyZR = 0x80
JoyL3 = 0x800
JoyR3 = 0x400
JoyPlus = 0x200
JoyMinus = 0x100

PovDown = 0x10000
PovUp = 0x20000
PovLeft = 0x80000
PovRight = 0x40000

LeftJoyDown = 0x10000
LeftJoyUp = 0x20000
LeftJoyLeft = 0x80000
LeftJoyRight = 0x40000

RightJoyDown = 0x8000000
RightJoyUp = 0x10000000
RightJoyRight = 0x20000000
RightJoyLeft = 0x40000000

BtnPower = 0x1000000
BtnVolPlus = 0x2000000
BtnVolMinus = 0x4000000

main_menu_options = ["Quitter sans rien faire", "Sauvegarder BOOT0, BOOT1, PRODINFO et PRODINFOF", "Restaurer avec suppression de données", "Restaurer sans suppression de données", "Restaurer seulement les partitions BOOT0, BOOT1 et BCPKG2-*", "Supprimer le contrôle parental", "Réinitialiser la console"]
explorer_menu_options = ["Revenir au menu principal", "Utiliser ce répertoire", "Revenir à la racine de la SD", "Remonter d'un répertoire"]

clearLine = "                                                                              "
mmcAlreadyConnected = 0
return_code = 0

prepare_paths = {
	if (explorerIsCalled == 1){
		restoreFolderPath = currentFolder
		dumpFolderPath = currentFolder
		currentFolder = "sd:/"
	}
	BOOT0Path = pathCombine(restoreFolderPath, "BOOT0.bin")
	BOOT1Path = pathCombine(restoreFolderPath, "BOOT1.bin")
	BCPKG1Path = pathCombine(restoreFolderPath, "BCPKG2-1-Normal-Main.bin")
	BCPKG2Path = pathCombine(restoreFolderPath, "BCPKG2-2-Normal-Sub.bin")
	BCPKG3Path = pathCombine(restoreFolderPath, "BCPKG2-3-SafeMode-Main.bin")
	BCPKG4Path = pathCombine(restoreFolderPath, "BCPKG2-4-SafeMode-Sub.bin")
	BOOT0DumpPath = pathCombine(dumpFolderPath, "BOOT0")
	BOOT1DumpPath = pathCombine(dumpFolderPath, "BOOT1")
	PRODINFODumpPath = pathCombine(dumpFolderPath, "PRODINFO.bin")
	PRODINFOFDumpPath = pathCombine(dumpFolderPath, "PRODINFOF.bin")
	return()
}

checkIfImportantSave = {
	importantSaves = ["8000000000000120", "80000000000000d1", "8000000000000047"]
	j = 0
	important = 0
	while (j < len(importantSaves)){
		if (importantSaves[j] == save){
			important = 1
		}
		j = j + 1
	}
}

mount_mmc = {
	if (mmcAlreadyConnected != 0) {
		return_code = 0
		return()
	}
	println("Montage de SYSMMC...")
	RESULT = mmcConnect("SYSMMC")
	if (RESULT) {
		color("RED")
		println("La sysnand n'a pas pu être initialisée!")
		println("Ceci peut être dû à une nand défectueuse ou des Bis Keys incorrectes.")
		println("Si vous exécutez ce script sur une console mais que la nand ne lui correspond pas, ce script ne peut pas fonctionner non plus.\n")
		color("WHITE")
		println("Appuyez sur n'importe quelle touche pour revenir au menu.")
		pause()
		return_code = 1
	} else() {
		mmcAlreadyConnected = 1
		return_code = 0
	}
	return()
}

mount_system = {
	println("Montage de la partition SYSTEM...")
	println("")
	RESULT = mmcMount("SYSTEM")
	if (RESULT) {
		color("RED")
		println("La partition SYSTEM n'a pas pu être montée!")
		println("")
		color("WHITE")
		println("Appuyez sur n'importe quelle touche pour revenir au menu.")
		pause()
		return_code = 1
	} else() {
		return_code = 0
	}
	return()
}

mount_user = {
		println("Montage de la partition USER...")
	println("")
	RESULT = mmcMount("USER")
	if (RESULT) {
		color("RED")
		println("La partition USER n'a pas pu être montée!")
		println("")
		color("WHITE")
		println("Appuyez sur n'importe quelle touche pour revenir au menu.")
		pause()
		return_code = 1
	} else() {
		return_code = 0
	}
	return()
}

main_menu = {
	clearscreen()
	color("WHITE")
	println("TegraScript ChoiDuJour  package restoration - SYSMMC")
	println("Par shadow256")
	println("")
	println("Sélectionner quoi faire.")
	println("")
	println("")
	printPos(0, 39)
	println("HAUT/BAS/VOL+/VOL- : se déplacer | A/POWER : Valider")

	selection = 1
	maxSelection = len(main_menu_options)
	y = 0
	while (y == 0) {
		printPos(0, 10)
		i = 0
		while (i < maxSelection) {
			color("WHITE")
			if (i + 1 == selection){
				color("RED")
			}
			println(main_menu_options[i])
			i = i + 1
		}
		verif_key = pause()
		if ((verif_key & LeftJoyDown) \|\| (verif_key & BtnVolMinus)) {
			if (selection < maxSelection){
			selection = selection + 1
			}
		}
		if ((verif_key & LeftJoyUp) \|\| (verif_key & BtnVolPlus)) {
			if (selection > 1){
			selection = selection - 1
			}
		}
		if ((verif_key & JoyA) \|\| (verif_key & BtnPower)) {
			y = 1
		}
	}
	main_action = selection
	return()
}

del_parental_control = {
	clearscreen()
	println("Suppression du contrôle parental")
	println("")
	println("Appuyez sur  Vol+ pour supprimer le contrôle parental ou appuyez sur n'importe quelle autre touche pour revenir au menu")
	println("")
	if (pause() & BtnVolPlus){
	mount_mmc()
		if (return_code == 1) {
			return()
		}
		mount_system()
		if (return_code == 1) {
			return()
		} else() {
			println("Suppression du contrôle parental")
			fileDel("bis:/save/8000000000000100")
			color("GREEN")
			println("")
			println("")
			println("Opération terminée avec succès, Appuyez sur n'importe quelle touche pour revenir au menu.")
			pause()
			return()
		}
	} else() {
		return()
	}
}

wip_console_data = {
	clearscreen()
	println("Réinitialisation de la console")
	println("")
	println("Appuyez sur Vol+ pour confirmer la suppression des données ou appuyez sur n'importe quelle autre touche pour revenir au menu")
	println("")
	if (pause() & BtnVolPlus){
		mount_mmc()
		if (return_code == 1) {
			return()
		}
		println("Suppression des données")
		println("")
		mount_system()
		if (return_code == 1) {
			return()
		} else() {
			println("Suppression de données de la partition SYSTEM")
			println("")
			files = dirRead("bis:/save")
			i = 0
			color("RED")
			while (i < len(files)) {
				if (!fileProperties[i]){ # checks if it's not a file
					save = files[i]
					checkIfImportantSave()
					if (!important){
						print("\rSuppression de ", save)
						res = fileDel(pathCombine("bis:/save", save))
						if (res) {
							println("\nLa suppression de fichiers a échoué!")
							pause()
							return()
						}
					}
				}
				i = i + 1
			}
		}
		color("WHITE")
		mount_user()
		if (return_code == 1) {
			return()
		} else() {
			println("Suppression de données de la partition USER")
			println("")
			color("RED")
			toDel = ["Album", "Contents", "save", "saveMeta", "temp"]
			i = 0
			while (i < len(toDel)){
				dirDel(pathCombine("bis:/", toDel[i]))
				mkdir(pathCombine("bis:/", toDel[i]))
				i = i + 1
			}
			mkdir("bis:/Contents/placehld")
			mkdir("bis:/Contents/registered")
		}
		color("GREEN")
		println("")
		println("")
		println("Opération terminée avec succès, Appuyez sur n'importe quelle touche pour revenir au menu.")
		pause()
		return()
	} else() {
		return()
	}
}

explorer_menu_init = {
	clearscreen()
	color("WHITE")
	println(explorerTitle)
	println("-------------------------------------------------------------------------------")
	printPos(0, 40)
	println("HAUT/BAS/Gauche/Droite/VOL+/VOL- : se déplacer | A/POWER : Valider")
	println("B : Dossier parent | X : Recharger dossier | Y : retour Racine SD")
	printPos(0, 3)
	if (((currentFolder == "sd:/") == 0) \|\| ((currentFolder == "sd:") == 0)) {
		parentDir = pathEscFolder(currentFolder)
	} else() {
		noParentDir = 1
		parentDir = "sd:"
		currentFolder = "sd:"
	}
	file = dirRead(currentFolder)
	folder_list = []
	i = 0
	while (i < len(file)) {
		if (fileProperties[i]) {
			folder_list = folder_list + file[i]
		}
		i = i + 1
	}
	foldersNumber = len(folder_list)
	selectedFolder = ""
	minIndexToPrint = 1
	maxIndexToPrint = len(explorer_menu_options)
	firstLineDisplay = 3
	middleLineDisplay = 16
	lastLineDisplay = 35
	maxSelection = maxIndexToPrint + foldersNumber
	firstLine = minIndexToPrint
	middleLineDesc = middleLineDisplay + minIndexToPrint
	middleLineAsc = maxSelection - middleLineDisplay
	lastLine = lastLineDisplay + minIndexToPrint
	firstLineLimit = firstLine
	middleLineDescLimit = middleLineDesc
	middleLineAscLimit = middleLineAsc
	middleLineLimit = middleLineAsc - middleLineDesc
	lastLineLimit = lastLine
	selection = minIndexToPrint
	return()
}

explorer_menu_choice = {
	x = 0
	while. (x == 0) {
		printPos(0, firstLineDisplay)
		printedLine = firstLineDisplay
		i = firstLine - 1
		while (i < maxIndexToPrint){
			color("GREEN")
			if (i + 1 == selection){
				color("RED")
			}
			# println("")
			# printPos(0, printedLine)
			println(explorer_menu_options[i])
			printedLine = printedLine + 1
			i = i + 1
		}
		# if (i == maxIndexToPrint) {
			# println("")
			# printedLine = printedLine + 1
		# }
		count = maxIndexToPrint
		j = 0
		while ((i + j < lastLine) && (j < foldersNumber)) {
			color("WHITE")
			count = count + 1
			if (count >= firstLine){
				if (i + j + 1 == selection){
					selectedFolder = folder_list[j]
					printPos(0, 38)
					print(clearLine)
					printPos(0, 38)
					color("GREEN")
					println(folder_list[j])
					printPos(0, printedLine)
					color("RED")
				}
				# println("")
				# printPos(0, printedLine)
				println(folder_list[j])
				printedLine = printedLine + 1
				j = j + 1
			}
		}
		println("-------------------------------------------------------------------------------")
		println("")
		color("GREEN")
		println(currentFolder)
		color("WHITE")
		verif_key = pause()
		if ((verif_key & LeftJoyDown) \|\| (verif_key & BtnVolMinus)) {
			if (selection < maxSelection){
				selection = selection + 1
			}
			if (selection > middleLineDesc){
				if (selection <= middleLineAsc){
					firstLine = firstLine + 1
					lastLine = lastLine + 1
				}
			}
		}
		if ((verif_key & LeftJoyUp) \|\| (verif_key & BtnVolPlus)) {
			if (selection > minIndexToPrint){
				selection = selection - 1
			}
			if (selection < middleLineAsc){
				if (selection >= middleLineDesc){
					firstLine = firstLine - 1
					lastLine = lastLine - 1
				}
			}
		}
		if ((verif_key & LeftJoyLeft)) {
			if (selection > minIndexToPrint){
				selection = selection - middleLineDisplay
				if (selection < minIndexToPrint){
					selection = minIndexToPrint
				}
			}
			if (selection < middleLineAsc){
				if (selection >= middleLineDesc){
					firstLine = firstLine - middleLineDisplay
					lastLine = lastLine - middleLineDisplay
				}
				if (selection < middleLineDesc){
					firstLine = minIndexToPrint
					lastLine = lastLineLimit
				}
			}
		}
		if ((verif_key & LeftJoyRight)) {
			if (selection < maxSelection){
				selection = selection + middleLineDisplay
				if (selection > maxSelection){
					selection = maxSelection
				}
			}
			if (selection > middleLineDesc){
				if (selection <= middleLineAsc){
					firstLine = firstLine + middleLineDisplay
					lastLine = lastLine + middleLineDisplay
				}
				if (selection > middleLineAsc){
					firstLine = maxSelection - lastLineDisplay
					lastLine = maxSelection
				}
			}
		}
		if ((verif_key & JoyB)) {
			selection = 4
			x = 1
		}
		if ((verif_key & JoyY)) {
			selection = 3
			x = 1
		}
		if ((verif_key & JoyX)) {
			selection = 0
			x = 1
		}
		if ((verif_key & JoyA) \|\| (verif_key & BtnPower)) {
			x = 1
		}
	}
	return()
}

explorer_menu = {
	currentFolder = "sd:"
	w = 0
	while (w == 0) {
		explorer_menu_init()
		explorer_menu_choice()
		if (selection == 1){
			return_code = -1
			return()
		}
		if (selection == 3){
			currentFolder = "sd:"
		}
		if (selection == 4){
			currentFolder = parentDir
		}
		if (selection > 4){
			currentFolder = pathCombine(currentFolder, selectedFolder)
		}
		if (selection == 2){
			w = 1
		}
	}
	return()
}

dump_important_partitions = {
	clearscreen()
	# println("Appuyez sur le bouton VOL+ pour sauvegarder les fichiers dans le dossier de votre choix")
	# println("Appuyez sur n'importe quel autre bouton pour sauvegarder les fichiers dans le dossier", dumpFolderPath)
	# if (pause() & BtnVolPlus){
		# explorerTitle = "Sélection du dossier de sauvegarde"
		# explorerIsCalled = 1
		# explorer_menu()
		# if (return_code == -1){
			# return()
		# }
	# }
	prepare_paths()
	mount_mmc()
	if (return_code == 1) {
		return()
	}
	println("Début de la sauvegarde des éléments  sur la carte SD")
	dumpFileExist = 0
	RESULT = fileExists(BOOT0DumpPath)
	if (RESULT){
		dumpFileExist = 1
	}
	RESULT = fileExists(BOOT1DumpPath)
	if (RESULT){
		dumpFileExist = 1
	}
	RESULT = fileExists(PRODINFODumpPath)
	if (RESULT){
		dumpFileExist = 1
	}
	RESULT = fileExists(PRODINFOFDumpPath)
	if (RESULT){
		dumpFileExist = 1
	}
	if (dumpFileExist == 1){
		color("RED")
		println("")
		println("Des fichiers de dump existent déjà dans le dossier", dumpFolderPath, ", souhaitez-vous les remplacer?")
		println("")
		color("WHITE")
		println("Appuyez sur VOL+ pour confirmer la suppression ou sur n'importe quelle autre touche pour revenir au menu.")
		if (pause() & BtnVolPlus){
			fileDel(BOOT0DumpPath)
			fileDel(BOOT1DumpPath)
			fileDel(PRODINFODumpPath)
			fileDel(PRODINFOFDumpPath)
		} else() {
			return()
		}
	}
	println("")
	println("Sauvegarde en cours...")
	mkdir(dumpFolderPath)
	mmcDump(BOOT0DumpPath, "BOOT0")
	mmcDump(BOOT1DumpPath, "BOOT1")
	mmcDump(PRODINFODumpPath, "PRODINFO")
	mmcDump(PRODINFOFDumpPath, "PRODINFOF")
		BOOT0DumpFileExist = 0
BOOT1DumpFileExist = 0
PRODINFODumpFileExist = 0
PRODINFOFDumpFileExist = 0
	RESULT = fileExists(BOOT0DumpPath)
	if (RESULT){
		BOOT0DumpFileExist = 1
	}
	RESULT = fileExists(BOOT1DumpPath)
	if (RESULT){
		BOOT1DumpFileExist = 1
	}
	RESULT = fileExists(PRODINFODumpPath)
	if (RESULT){
		PRODINFODumpFileExist = 1
	}
	RESULT = fileExists(PRODINFOFDumpPath)
	if (RESULT){
		PRODINFOFDumpFileExist = 1
	}
	if (BOOT0DumpFileExist == 1 && BOOT1DumpFileExist == 1 && PRODINFODumpFileExist == 1 && PRODINFOFDumpFileExist == 1){
		color("GREEN")
		println("")
		println("")
		println("Sauvegarde terminée, les fichiers se trouvent dans le dossier", dumpFolderPath, ", pensez à les garder de côté.")
		println("")
		color("WHITE")
		println("Appuyez sur n'importe quelle touche pour revenir au menu.")
		pause()
		return()
	} else() {
		color("RED")
		println("")
		println("Une erreur s'est produite durant la sauvegarde, vérifiez l'espace disponible sur votre SD.")
		println("")
		color("WHITE")
		println("Appuyez sur n'importe quelle touche pour revenir au menu.")
		pause()
		return()
	}
}

choidujour_package_restore = {
	clearscreen()
	# println("Appuyez sur le bouton VOL+ pour sélectionner le dossier contenant le   package de ChoiDuJour")
	# println("Appuyez sur n'importe quel autre bouton pour  utiliser le package de ChoiDuJour situé dans le dossier", restoreFolderPath)
	# if (pause() & BtnVolPlus){
		# explorerTitle = "Sélection du dossier du package de ChoiDuJour"
		# explorerIsCalled = 1
		# explorer_menu()
		# if (return_code == -1){
			# return()
		# }
	# }
	prepare_paths()
println("Début de la restauration")
println("")
restoreFileExist = 1
RESULT = fileExists(BOOT0Path)
if (RESULT == 0){
restoreFileExist = 0
}
RESULT = fileExists(BOOT1Path)
if (RESULT == 0){
	restoreFileExist = 0
}
RESULT = fileExists(BCPKG1Path)
if (RESULT == 0){
	restoreFileExist = 0
}
RESULT = fileExists(BCPKG2Path)
if (RESULT == 0){
	restoreFileExist = 0
}
RESULT = fileExists(BCPKG3Path)
if (RESULT == 0){
	restoreFileExist = 0
}
RESULT = fileExists(BCPKG4Path)
if (RESULT == 0){
	restoreFileExist = 0
}
SYSTEM_Contents_path = pathCombine(restoreFolderPath, "SYSTEM/Contents")
RESULT = fileExists(SYSTEM_Contents_path)
if (RESULT == 0){
	restoreFileExist = 0
}
if (restoreFileExist == 1){
	RESULT = dirRead(SYSTEM_Contents_path)
	if (len(RESULT) == 0){
		restoreFileExist = 0
	}
}
SYSTEM_save_path = pathCombine(restoreFolderPath, "SYSTEM/save")
RESULT = fileExists(SYSTEM_save_path)
if (RESULT == 0){
	restoreFileExist = 0
}
if (restoreFileExist == 1){
	RESULT = dirRead(SYSTEM_save_path)
	if (len(RESULT) == 0){
		restoreFileExist = 0
	}
}
if (restoreFileExist == 0){
	color("RED")
	println("")
	println("Certains fichiers ou dossiers sont manquants dans le dossier", restoreFolderPath, ", le script ne peut continuer.")
	println("")
	color("WHITE")
	println("Appuyez sur n'importe quelle touche pour revenir au menu.")
	pause()
	return()
}
if (method_restore == 1){
	color("RED")
	println("Attention: Toutes les données de la nand seront perdues")
	color("WHITE")
	println("")
	println("Appuyez sur VOL+ pour confirmer ou sur n'importe quelle autre touche pour revenir au menu.")
	RESULT = pause() & BtnVolPlus
	if (!RESULT){
		return()
	}
}

mount_mmc()
if (return_code == 1){
	return()
}
if (method_restore < 3){
	mount_system()
	if (return_code == 1){
		return()
	}
	mount_user()
	if (return_code == 1){
		return()
	}
}

println("")
println("Restauration des partitions BOOT0, BOOT1 et BCPKG2-*...")
println("")
mmcRestore(BOOT0Path, "BOOT0", 1)
mmcRestore(BOOT1Path, "BOOT1", 1)
mmcRestore(BCPKG1Path, "BCPKG2-1-Normal-Main", 0)
mmcRestore(BCPKG2Path, "BCPKG2-2-Normal-Sub", 0)
mmcRestore(BCPKG3Path, "BCPKG2-3-SafeMode-Main", 0)
mmcRestore(BCPKG4Path, "BCPKG2-4-SafeMode-Sub", 0)
if (method_restore == 3){
	color("GREEN")
	println("")
	println("")
	println("Oppération terminée avec succès!")
	println("")
	color("WHITE")
	println("Appuyez sur n'importe quelle touche pour revenir au menu.")
	pause()
	return()
}

println("Restauration de la partition SYSTEM...")
mount_system()
if (return_code == 1){
	return()
}
if (method_restore == 1){
	dirDel("bis:/Contents")
	dirDel("bis:/save")
	dirDel("bis:/saveMeta")
	fileDel("bis:/PRF2SAFE.RCV")
}
dirCopy(SYSTEM_Contents_path, "bis:/")
dirCopy(SYSTEM_save_path, "bis:/")
if (method_restore == 1){
	println("")
	println("Restauration de la partition USER...")
	mount_user()
	if (return_code == 1){
		return()
	}
	dirDel("bis:/Album")
	dirDel("bis:/Contents")
	dirDel("bis:/save")
	dirDel("bis:/saveMeta")
	dirDel("bis:/temp")
	fileDel("bis:/PRF2SAFE.RCV")
	mkdir("bis:/Album")
	mkdir("bis:/Contents")
	mkdir("bis:/Contents/placehld")
	mkdir("bis:/Contents/registered")
	mkdir("bis:/save")
	mkdir("bis:/saveMeta")
	mkdir("bis:/temp")
}
microSD_restoreFolderPath = pathCombine(restoreFolderPath, "microSD")
RESULT = fileExists(microSD_restoreFolderPath)
if (RESULT){
	file = dirRead(microSD_restoreFolderPath)
	i = 0
	while (i < len(file)){
		temp_microSD_restore_file = ""
		hekateConfigFileFounded = 0
		temp_microSD_restore_file = pathCombine(temp_microSD_restore_file, file[i])
		if (file[i] == "hekate_ipl.ini"){
			hekateConfigFileFounded = 1
		}
		if (hekateConfigFileFounded == 1){
			RESULT = fileExists("sd:/bootloader")
			if (RESULT == 0){
				mkdir("sd:/bootloader")
			}
			RESULT = fileExists("sd:/bootloader/hekate_ipl.ini")
			if (RESULT == 1){
				fileCopy("sd:/bootloader/hekate_ipl.ini", "sd:/bootloader/hekate_ipl.ini.bak")
			}
			fileCopy(temp_microSD_restore_file, "sd:/bootloader/hekate_ipl.ini")
		}
		if (hekateConfigFileFounded == 0){
			tempKipFile = ""
			tempKipFile = pathCombine("sd:/", file[i])
			fileCopy(temp_microSD_restore_file, tempKipFile)
		}
		i = i + 1
	}
}

color("GREEN")
println("")
println("")
println("Opération terminée avec succès!")
println("")
color("WHITE")
println("Appuyez sur n'importe quelle touche pour revenir au menu.")
	pause()
	return()
}

z = 0
while (z == 0) {
	main_action = 0
	explorerIsCalled = 0
	restoreFolderPath = "sd:/cdj_package_files"
	dumpFolderPath = "sd:/dump"
	main_menu()
	if (main_action == 1){
		exit()
	}
	if (main_action == 2){
		dump_important_partitions()
	}
	if (main_action == 3){
		choidujour_package_restore(method_restore = 1)
	}
	if (main_action == 4){
		choidujour_package_restore(method_restore = 2)
	}
	if (main_action == 5){
		choidujour_package_restore(method_restore = 3)
	}
	if (main_action == 6){
		del_parental_control()
	}
	if (main_action == 7){
		wip_console_data()
	}
}