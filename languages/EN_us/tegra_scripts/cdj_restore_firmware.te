setString("Exit", $menuoption1)
setString("Save BOOT0, BOOT1, PRODINFO and PRODINFOF", $menuoption2)
setString("Restore with datas wip", $menuoption3)
setString("Restore without datas wip", $menuoption4)
setString("Only restore the  BOOT0, BOOT1 and BCPKG2-* partitions", $menuoption5)
setString("Remove parental lock", $menuoption6)
setString("Factory reset", $menuoption7)
setString("Switch between working on SYSNAND or EMUNAND", $menuoption8)

setString("Back to main menu", $menuoption9)
setString("Use this folder", $menuoption10)
setString("Go back to SD root", $menuoption11)
setString("Parent folder", $menuoption12)

setString("                                                                              ", $clearLine)

@mmcAlreadyConnected = setInt(0);
@mmcTypeWork = setInt(0);

@reloadMenuLoop = getPosition()
clearscreen()
@explorerIsCalled = setInt(0);
setString("sd:/cdj_package_files", $restoreFolderPath)
setString("sd:/dump", $dumpFolderPath)
if (@mmcTypeWork, ==, 0){
	setColor("WHITE")
	printf("TegraScript ChoiDuJour  package restoration - SYSMMC")
}
if (@mmcTypeWork, ==, 1){
	setColor("GREEN")
	printf("TegraScript ChoiDuJour  package restoration - EMUMMC")
	setColor("WHITE")
}
printf("By shadow256")
printf("")
printf("Select what you want to do:")
printf("")
printf("")

setPrintPos(0, 35)
printf("Up/Down/VOL+/VOL- : move in menu | A/POWER : validate")
if (@mmcTypeWork, ==, 0){
	printf("X : Work on the EMUNAND")
}
if (@mmcTypeWork, ==, 1){
	printf("X : Work on the SYSNAND")
}
@selection = setInt(1)
@maxSelection = setInt(8)

@optionLoop = getPosition()
setPrintPos(0, 10)
@current = setInt(1)

@drawLoop = getPosition()
setColor("WHITE")
setStringIndex(@current, $toDraw)
if (@selection, ==, @current){
	setColor("RED")
}
printf($toDraw)
@current = math(@current, +, 1)
if (@current, <=, @maxSelection){
	goto(@drawLoop)
}
pause()
if (@BTN_VOL-){
	if (@selection, <, @maxSelection){
		@selection = math(@selection, +, 1)
	}
}
if (@BTN_DOWN){
	if (@selection, <, @maxSelection){
		@selection = math(@selection, +, 1)
	}
}
if (@BTN_VOL+){
	if (@selection, >, 1){
		@selection = math(@selection, -, 1)
	}
}
if (@BTN_UP){
	if (@selection, >, 1){
		@selection = math(@selection, -, 1)
	}
}
if (@BTN_X){
	@BTN_A=setInt(1)
	@selection=setInt(8)
}
if (@BTN_A, ==, 0){
	goto(@optionLoop)
}

if (@selection, ==, 1){
	exit()
}
if (@selection, ==, 2){
	@checkInput = setInt(4);
	clearscreen()
	printf("Press VOL+ key to save the files in a chosen folder")
	printf("Press any other keys  to save the files in the folder ", $dumpFolderPath)
	pause()
	if (@BTN_VOL+){
		setString("SÃ©lection of the save folder", $explorerTitle)
		@explorerIsCalled = setInt(1)
	}
}
if (@selection, ==, 3){
	@checkInput = setInt(1);
	clearscreen()
	printf("Press VOL+ key to select the folder containing ChoiDuJour package")
	printf("Press any other keys to  use the  ChoiDuJour package in the folder", $restoreFolderPath)
	pause()
	if (@BTN_VOL+){
		setString("Select the  ChoiDuJour package folder", $explorerTitle)
		@explorerIsCalled = setInt(1)
	}
}
if (@selection, ==, 4){
	@checkInput = setInt(2);
		clearscreen()
	printf("Press VOL+ key to select the folder containing ChoiDuJour package")
	printf("Press any other keys to  use the  ChoiDuJour package in the folder", $restoreFolderPath)
	pause()
	if (@BTN_VOL+){
		setString("Select the  ChoiDuJour package folder", $explorerTitle)
		@explorerIsCalled = setInt(1)
	}
}
if (@selection, ==, 5){
	@checkInput = setInt(3);
		clearscreen()
	printf("Press VOL+ key to select the folder containing ChoiDuJour package")
	printf("Press any other keys to  use the  ChoiDuJour package in the folder", $restoreFolderPath)
	pause()
	if (@BTN_VOL+){
		setString("Select the  ChoiDuJour package folder", $explorerTitle)
		@explorerIsCalled = setInt(1)
	}
}
if (@selection, ==, 6){
	clearscreen()
	printf("Remove Parental Lock")
	printf("")
	printf("Press VOL+ to remove parental lock or press any other keys to go back to menu")
	printf("")
	pause() 
	@checkInput = setInt(0);
	if (@BTN_VOL+){
		@checkInput = setInt(1);
	}
	if (@checkInput, == , 0){
		goto(@reloadMenuLoop)
	}
	if (@mmcTypeWork, ==, 0){
		if (@mmcAlreadyConnected, ==, 0){
			printf("Mounting SYSMMC...") 
			mmc_connect("SYSMMC")
			if (@RESULT){
				setColor("RED")
				printf("The sysnand couldn't be initialized!")
				printf("This may be due to faulty nand or incorrect Bis Keys.")
				printf("If you run this script on a console but the nand doesn't match it, this script can't work either.")
				printf("")
				setColor("WHITE")
				printf("Press any key to go back to menu.")
				pause()
				goto(@reloadMenuLoop)
			}
			@mmcAlreadyConnected = setInt(1)
		}
	}
	if (@mmcTypeWork, ==, 1){
		if (@mmcAlreadyConnected, ==, 0){
			printf("Mounting EMUMMC...") 
			mmc_connect("EMUMMC")
			if (@RESULT){
				setColor("RED")
				printf("The emunand couldn't be initialized!")
				printf("This may be due to faulty nand or incorrect Bis Keys.")
				printf("If you run this script on a console but the nand doesn't match it, this script can't work either.")
				printf("")
				setColor("WHITE")
				printf("Press any key to go back to menu.")
				pause()
				goto(@reloadMenuLoop)
			}
			@mmcAlreadyConnected = setInt(1)
		}
	}
	printf("Mounting SYSTEM partition...")
	mmc_mount("SYSTEM")
	if (@RESULT){
		setColor("RED")
		printf("System partition failed to mount!")
		printf("")
		setColor("WHITE")
		printf("Press any key to go back to menu.")
		pause()
		goto(@reloadMenuLoop)
	}
	printf("Deleting Parental Lock")
	fs_del("emmc:/save/8000000000000100")
	setColor("GREEN")
	printf("")
	printf("")
	printf("Done! press any key to return to menu")
	pause()
	goto(@reloadMenuLoop)
}
if (@selection, ==, 7){
	clearscreen()
	printf("Remove all datas")
	printf("")
	printf("Press VOL+ to remove all datas or press any other keys to go back to menu")
	printf("")
	pause() 
	@checkInput = setInt(0);
	if (@BTN_VOL+){
		@checkInput = setInt(1);
	}
	if (@checkInput, == , 0){
		goto(@reloadMenuLoop)
	}
	if (@mmcTypeWork, ==, 0){
		if (@mmcAlreadyConnected, ==, 0){
			printf("Mounting SYSMMC...") 
			mmc_connect("SYSMMC")
			if (@RESULT){
				setColor("RED")
				printf("The sysnand couldn't be initialized!")
				printf("This may be due to faulty nand or incorrect Bis Keys.")
				printf("If you run this script on a console but the nand doesn't match it, this script can't work either.")
				printf("")
				setColor("WHITE")
				printf("Press any key to go back to menu.")
				pause()
				goto(@reloadMenuLoop)
			}
			@mmcAlreadyConnected = setInt(1)
		}
	}
	if (@mmcTypeWork, ==, 1){
		if (@mmcAlreadyConnected, ==, 0){
			printf("Mounting EMUMMC...") 
			mmc_connect("EMUMMC")
			if (@RESULT){
				setColor("RED")
				printf("The emunand couldn't be initialized!")
				printf("This may be due to faulty nand or incorrect Bis Keys.")
				printf("If you run this script on a console but the nand doesn't match it, this script can't work either.")
				printf("")
				setColor("WHITE")
				printf("Press any key to go back to menu.")
				pause()
				goto(@reloadMenuLoop)
			}
			@mmcAlreadyConnected = setInt(1)
		}
	}
	printf("Deleting datas")
	printf("")
	printf("Mounting SYSTEM partition...")
	mmc_mount("SYSTEM")
	if (@RESULT){
		setColor("RED")
		printf("SYSTEM partition failed to mount!")
		printf("This may be due to faulty nand or incorrect Bis Keys.")
		printf("If you run this script on a console but the nand doesn't match it, this script can't work either.")
		printf("")
		setColor("WHITE")
		printf("Press any key to go back to menu.")
		pause()
		goto(@reloadMenuLoop)
	}
	setString("emmc:/save/", $basePath)
	@count = setInt(1)
	printf("Deleting SYSTEM")
	printf("")
	fs_delRecursive("emmc:/saveMeta")
	fs_mkdir("emmc:/saveMeta")
	fs_openDir("emmc:/save")
	@LOOP = getPosition()
	fs_readDir()
	if (@ISDIRVALID){
		combineStrings($basePath, $FILENAME, $path)
		setPrintPos(0, 17)
		@check = compareStrings($FILENAME, "8000000000000120")
		if (@check){
			goto(@LOOP)
		}
		@check = compareStrings($FILENAME, "80000000000000d1")
		if (@check){
			goto(@LOOP)
		}
		@check = compareStrings($FILENAME, "8000000000000047")
		if (@check){
			goto(@LOOP)
		}
		@count = math(@count, "+", 1)
		printf(@count, ": ", $FILENAME)
		fs_del($path)
		goto(@LOOP)
	}
	printf("")
	printf("Mounting USER partition...")
	mmc_mount("USER")
	if (@RESULT){
		setColor("RED")
		printf("User partition failed to mount!")
		printf("This may be due to faulty nand or incorrect Bis Keys.")
		printf("If you run this script on a console but the nand doesn't match it, this script can't work either.")
		printf("")
		setColor("WHITE")
		printf("Press any key to go back to menu.")
		pause()
		goto(@reloadMenuLoop)
	}
	printf("Deleting USER")
	printf("")
	printf("emmc:/Contents")
	fs_delRecursive("emmc:/Contents")
	fs_mkdir("emmc:/Contents")
	printf("emmc:/Contents/placehld")
	fs_mkdir("emmc:/Contents/placehld")
	fs_mkdir("emmc:/Contents/registered")
	printf("emmc:/save")
	fs_delRecursive("emmc:/save")
	fs_mkdir("emmc:/save")
	printf("emmc:/saveMeta")
	fs_delRecursive("emmc:/saveMeta")
	fs_mkdir("emmc:/saveMeta")
	printf("emmc:/temp")
	fs_delRecursive("emmc:/temp")
	fs_mkdir("emmc:/temp")
	setColor("GREEN")
	printf("")
	printf("")
	printf("Done! press any key to return to menu")
	pause()
	goto(@reloadMenuLoop)
}
if (@selection, ==, 8){
	if (@mmcTypeWork, ==, 0){
		if (@EMUMMC, == , 0){
		clearscreen()
		printf("No EMUNAND configured on the SD, the SYSNAND will continue to be usedd.")
		printf("Press any keys to go back to menu.")
		pause()
		goto(@reloadMenuLoop)
	}
		@mmcTypeWork = setInt(1);
		@mmcAlreadyConnected = setInt(0);
		goto(@reloadMenuLoop)
	}
	if (@mmcTypeWork, ==, 1){
		@mmcTypeWork = setInt(0);
		@mmcAlreadyConnected = setInt(0);
		goto(@reloadMenuLoop)
	}
}

@explorerCall = getPosition()
if (@explorerIsCalled, ==, 1){
	setString("sd:/", $currentFolder)
	@loadFolderLoop = getPosition()
		clearscreen()
	setColor("WHITE")
	printf($explorerTitle)
	printf("-------------------------------------------------------------------------------")
	setPrintPos(0, 40)
	printf("Up/Down/Left/Right/VOL+/VOL- : Move into menu | A/POWER : Validate | B : Parent folder")
	printf("X : Reload folder | Y : Back to SD root")
	setPrintPos(0, 3)
	@verifParentDirLoop = getPosition()
	@noParentDir = setInt(0)
	compareStrings($currentFolder, "sd:/")
	if (@RESULT, ==, 1){
		@noParentDir = setInt(1)
	}
	@currentFolderLen = stringLength($currentFolder)
	@currentFolderVerif = setInt(4)
	setString("sd:/", $parentDir)
	setString("", $tempActual)
	@slashEncountered = setInt(0)
	@verifParentDirLoop = getPosition()
	if (@noParentDir, ==, 0){
		if (@currentFolderVerif, <, @currentFolderLen){
			subString($currentFolder, @currentFolderVerif, 1, $verifiedChar)
			compareStrings($verifiedChar, "/")
			if (@RESULT, ==, 1){
				@slashEncountered = setInt(1)
			}
			if (@slashEncountered, ==, 0){
				combineStrings($tempActual, $verifiedChar, $tempActual)
			}
			if (@slashEncountered, ==, 1){
				combineStrings($parentDir, $tempActual, $parentDir)
				combineStrings($parentDir, "/", $parentDir)
				setString("", $tempActual)
				@slashEncountered = setInt(0)
			}
			@currentFolderVerif = math(@currentFolderVerif, +, 1)
			goto(@verifParentDirLoop)
		}
		compareStrings($parentDir, "sd:/")
		if (@RESULT, ==, 0){
		@supressLastSlash = stringLength($parentDir)
		@supressLastSlash = math(@supressLastSlash, -, 1)
		subString($parentDir, 0, @supressLastSlash, $parentDir)
		}
	}
	@foldersNumber = setInt(0)
	fs_openDir($currentFolder)
	@countLoop = getPosition()
	if (@ISDIRVALID, ==, 1){
		fs_readDir()
		if (@ISDIRVALID, ==, 1){
			if (@ISDIR, ==, 1){
			@fileNameCount = stringLength($FILENAME)
			if (@fileNameCount, >, 79){
				setColor("RED")
				printf("")
				printf("A folder with more than  79 chars as been detected, the chosen folder couldn't be displayed for now.")
				printf("")
				setColor("WHITE")
				printf("Press any key to go back to menu.")
				pause()
				goto(@reloadMenuLoop)
			}
				@foldersNumber = math(@foldersNumber, +, 1)
			}
		}
		goto(@countLoop)
	}
	fs_closeDir()
	setString("", $selectedFolder)
	@minIndexToPrint = setInt(9)
	@maxIndexToPrint = setInt(12)
	@firstLineDisplay = setInt(3)
	@middleLineDisplay = setInt(14)
	@lastLineDisplay = setInt(28)
	@maxSelection = math(@maxIndexToPrint, +, @foldersNumber)
	@firstLine = setInt(@minIndexToPrint)
	@middleLineDesc = math(@middleLineDisplay, +, @minIndexToPrint)
	@middleLineAsc = math(@maxSelection, -, @middleLineDisplay)
	@lastLine = math(@lastLineDisplay, +, @minIndexToPrint)
	@firstLineLimit = setInt(@firstLine)
	@middleLineDescLimit = setInt(@middleLineDesc)
	@middleLineAscLimit = setInt(@middleLineAsc)
	@middleLineLimit = math(@middleLineAsc, -, @middleLineDesc)
	@lastLineLimit = setInt(@lastLine)
	@selection = setInt(@minIndexToPrint)
	@optionLoop2 = getPosition()
	setPrintPos(0, @firstLineDisplay)
	@printedLine = setInt(@firstLineDisplay)
	@current = setInt(@firstLine)
	@drawLoop2 = getPosition()
	if (@current, <=, @maxIndexToPrint){
		setColor("WHITE")
		setStringIndex(@current, $toDraw)
		if (@selection, ==, @current){
			setColor("RED")
		}
		printf($clearLine)
		setPrintPos(0, @printedLine)
		printf($toDraw)
		@printedLine = math(@printedLine, +, 1)
		@current = math(@current, +, 1)
		if (@current, <=, @maxIndexToPrint){
			goto(@drawLoop2)
		}
	}
	math(@current, -, 1)
	if (@RESULT, ==, @maxIndexToPrint){
		printf($clearLine)
		@printedLine = math(@printedLine, +, 1)
	}
	fs_openDir($currentFolder)
	@count = setInt(@maxIndexToPrint)
	@drawFolderLoop = getPosition()
	setColor("WHITE")
	if (@ISDIRVALID, ==, 1){
		fs_readDir()
		if (@ISDIRVALID, ==, 1){
			if (@ISDIR, ==, 1){
				@count = math(@count, +, 1)
				if (@count, >=, @firstLine){
					if (@selection, ==, @current){
						setString($FILENAME, $selectedFolder)
						setColor("RED")
					}
					printf($clearLine)
					setPrintPos(0, @printedLine)
					printf($FILENAME)
					@printedLine = math(@printedLine, +, 1)
					@current = math(@current, +, 1)
				}
			}
		}
		if (@current, <=, @lastLine){
			goto(@drawFolderLoop)
		}
	}
	fs_closeDir()
	printf("-------------------------------------------------------------------------------")
	printf("")
	setColor("GREEN")
	printf($currentFolder)
	setColor("WHITE")
	pause()
	if (@BTN_DOWN){
		if (@selection, <, @maxSelection){
			@selection = math(@selection, +, 1)
		}
		if (@selection, >, @middleLineDesc){
			if (@selection, <=, @middleLineAsc){
			@firstLine = math(@firstLine, +, 1)
			@lastLine = math(@lastLine, +, 1)
			}
		}
		@current = setInt(@firstLine)
	}
	if (@BTN_VOL-){
		if (@selection, <, @maxSelection){
			@selection = math(@selection, +, 1)
		}
		if (@selection, >, @middleLineDesc){
			if (@selection, <=, @middleLineAsc){
			@firstLine = math(@firstLine, +, 1)
			@lastLine = math(@lastLine, +, 1)
			}
		}
		@current = setInt(@firstLine)
	}
	if (@BTN_RIGHT){
		if (@selection, <, @maxSelection){
			@selection = math(@selection, +, @middleLineDisplay)
			if (@selection, >, @maxSelection){
				@selection = setInt(@maxSelection)
			}
		}
		if (@selection, >, @middleLineDesc){
			if (@selection, <=, @middleLineAsc){
				@firstLine = math(@firstLine, +, @middleLineDisplay)
				@lastLine = math(@lastLine, +, @middleLineDisplay)
			}
			if (@selection, >, @middleLineAsc){
				@firstLine = math(@maxSelection, -, @lastLineDisplay)
				@lastLine = setInt(@maxSelection)
			}
		}
		@current = setInt(@firstLine)
	}
	if (@BTN_UP){
		if (@selection, >, @minIndexToPrint){
			@selection = math(@selection, -, 1)
		}
		if (@selection, <, @middleLineAsc){
			if (@selection, >=, @middleLineDesc){
			@firstLine = math(@firstLine, -, 1)
			@lastLine = math(@lastLine, -, 1)
			}
		}
		@current = setInt(@firstLine)
	}
	if (@BTN_VOL+){
		if (@selection, >, @minIndexToPrint){
			@selection = math(@selection, -, 1)
		}
		if (@selection, <, @middleLineAsc){
			if (@selection, >=, @middleLineDesc){
			@firstLine = math(@firstLine, -, 1)
			@lastLine = math(@lastLine, -, 1)
			}
		}
		@current = setInt(@firstLine)
	}
	if (@BTN_LEFT){
		if (@selection, >, @minIndexToPrint){
			@selection = math(@selection, -, @middleLineDisplay)
			if (@selection, <, @minIndexToPrint){
				@selection = setInt(@minIndexToPrint)
			}
		}
		if (@selection, <, @middleLineAsc){
			if (@selection, >=, @middleLineDesc){
				@firstLine = math(@firstLine, -, @middleLineDisplay)
				@lastLine = math(@lastLine, -, @middleLineDisplay)
			}
			if (@selection, <, @middleLineDesc){
				@firstLine = setInt(@minIndexToPrint)
				@lastLine = setInt(@lastLineLimit)
			}
		}
		@current = setInt(@firstLine)
	}
	if (@BTN_B){
		@selection = setInt(9)
		@BTN_A = setInt(1)
	}
		if (@BTN_Y){
		@selection = setInt(8)
		@BTN_A = setInt(1)
	}
	if (@BTN_X){
		goto(@loadFolderLoop)
	}
		if (@BTN_POWER){
		@BTN_A = setInt(1)
	}
	if (@BTN_A, ==, 0){
		goto(@optionLoop2)
	}
	if (@selection, ==, 6){
		goto(@reloadMenuLoop)
	}
	if (@selection, ==, 8){
		setString("sd:/", $currentFolder)
		goto(@loadFolderLoop)
	}
	if (@selection, ==, 9){
		setString($parentDir, $currentFolder)
		goto(@loadFolderLoop)
	}
	if (@selection, >, 9){
		compareStrings($currentFolder, "sd:/")
		if (@RESULT, ==, 1){
			combineStrings($currentFolder, $selectedFolder, $tempCurrentFolder)
			setString($tempCurrentFolder, $currentFolder)
			goto(@loadFolderLoop)
		}
		combineStrings($currentFolder, "/", $tempCurrentFolder)
		combineStrings($tempCurrentFolder, $selectedFolder, $currentFolder)
		goto(@loadFolderLoop)
	}
}

if (@explorerIsCalled, ==, 1){
	compareStrings($currentFolder, "sd:/")
	if (@RESULT, ==, 1){
		setString("sd:", $currentFolder)
	}
	setString($currentFolder, $restoreFolderPath)
	setString($currentFolder, $dumpFolderPath)
	setString("sd:/", $currentFolder)
}
@supressLastSlash = stringLength($restoreFolderPath)
@supressLastSlash = math(@supressLastSlash, -, 1)
subString($restoreFolderPath, @supressLastSlash, 1, $tempChar)
compareStrings($tempChar, "/")
if (@RESULT, ==, 1){
@supressLastSlash = math(@supressLastSlash, -, 1)
subString($restoreFolderPath, 0, @supressLastSlash, $restoreFolderPath)
}
@supressLastSlash = stringLength($dumpFolderPath)
@supressLastSlash = math(@supressLastSlash, -, 1)
subString($dumpFolderPath, @supressLastSlash, 1, $tempChar)
compareStrings($tempChar, "/")
if (@RESULT, ==, 1){
@supressLastSlash = math(@supressLastSlash, -, 1)
subString($dumpFolderPath, 0, @supressLastSlash, $dumpFolderPath)
}
combineStrings($restoreFolderPath, "/BOOT0.bin", $BOOT0Path)
combineStrings($restoreFolderPath, "/BOOT1.bin", $BOOT1Path)
combineStrings($restoreFolderPath, "/BCPKG2-1-Normal-Main.bin", $BCPKG1Path)
combineStrings($restoreFolderPath, "/BCPKG2-2-Normal-Sub.bin", $BCPKG2Path)
combineStrings($restoreFolderPath, "/BCPKG2-3-SafeMode-Main.bin", $BCPKG3Path)
combineStrings($restoreFolderPath, "/BCPKG2-4-SafeMode-Sub.bin", $BCPKG4Path)
combineStrings($dumpFolderPath, "/BOOT0", $BOOT0DumpPath)
combineStrings($dumpFolderPath, "/BOOT1", $BOOT1DumpPath)
combineStrings($dumpFolderPath, "/PRODINFO.bin", $PRODINFODumpPath)
combineStrings($dumpFolderPath, "/PRODINFOF.bin", $PRODINFOFDumpPath)

clearscreen()
setColor("WHITE")
if (@checkInput, ==, 4){
	if (@mmcTypeWork, ==, 0){
		if (@mmcAlreadyConnected, ==, 0){
			printf("Mounting SYSMMC...") 
			mmc_connect("SYSMMC")
			if (@RESULT){
				setColor("RED")
				printf("The sysnand couldn't be initialized!")
				printf("This may be due to faulty nand or incorrect Bis Keys.")
				printf("If you run this script on a console but the nand doesn't match it, this script can't work either.")
				printf("")
				setColor("WHITE")
				printf("Press any key to go back to menu.")
				pause()
				goto(@reloadMenuLoop)
			}
			@mmcAlreadyConnected = setInt(1)
		}
	}
	if (@mmcTypeWork, ==, 1){
		if (@mmcAlreadyConnected, ==, 0){
			printf("Mounting EMUMMC...") 
			mmc_connect("EMUMMC")
			if (@RESULT){
				setColor("RED")
				printf("The emunand couldn't be initialized!")
				printf("This may be due to faulty nand or incorrect Bis Keys.")
				printf("If you run this script on a console but the nand doesn't match it, this script can't work either.")
				printf("")
				setColor("WHITE")
				printf("Press any key to go back to menu.")
				pause()
				goto(@reloadMenuLoop)
			}
			@mmcAlreadyConnected = setInt(1)
		}
	}
	printf("Begining of save files on SD")
	@dumpFileExist = setInt(0);
	fs_exists($BOOT0DumpPath)
	if (@RESULT){
		@dumpFileExist = setInt(1);
	}
	fs_exists($BOOT1DumpPath)
	if (@RESULT){
		@dumpFileExist = setInt(1);
	}
	fs_exists($PRODINFODumpPath)
	if (@RESULT){
		@dumpFileExist = setInt(1);
	}
	fs_exists($PRODINFOFDumpPath)
	if (@RESULT){
		@dumpFileExist = setInt(1);
	}
	if (@dumpFileExist, ==, 1){
		setColor("RED")
		printf("")
		printf("Dump files already exist in the folder", $dumpFolderPath, ", do you want to replace them?")
		printf("")
		setColor("WHITE")
		printf("Press VOL+ to confirm the replacement or any other keys to quit the script.")
		pause()
		if (@BTN_VOL+, ==, 0){
			goto(@reloadMenuLoop)
		}
	}
	printf("")
	printf("Dumping...")
	fs_del($BOOT0DumpPath)
	fs_del($BOOT1DumpPath)
	fs_del($PRODINFODumpPath)
	fs_del($PRODINFOFDumpPath)
	fs_mkdir($dumpFolderPath)
	mmc_dumpPart("BOOT", $dumpFolderPath)
	mmc_dumpPart("PRODINFO", $PRODINFODumpPath)
	mmc_dumpPart("PRODINFOF", $PRODINFOFDumpPath)
		@BOOT0DumpFileExist = setInt(0);
@BOOT1DumpFileExist = setInt(0);
@PRODINFODumpFileExist = setInt(0);
@PRODINFOFDumpFileExist = setInt(0);
	fs_exists($BOOT0DumpPath)
	if (@RESULT){
		@BOOT0DumpFileExist = setInt(1);
	}
	fs_exists($BOOT1DumpPath)
	if (@RESULT){
		@BOOT1DumpFileExist = setInt(1);
	}
	fs_exists($PRODINFODumpPath)
	if (@RESULT){
		@PRODINFODumpFileExist = setInt(1);
	}
	fs_exists($PRODINFOFDumpPath)
	if (@RESULT){
		@PRODINFOFDumpFileExist = setInt(1);
	}
	if (@BOOT0DumpFileExist, ==, 1){
		if (@BOOT1DumpFileExist, ==, 1){
			if (@PRODINFODumpFileExist, ==, 1){
				if (@PRODINFOFDumpFileExist, ==, 1){
					setColor("GREEN")
					printf("")
					printf("")
					printf("Save complete, the files are in the folder", $dumpFolderPath, ", don't forget to keep them somewhere else.")
					printf("")
					setColor("WHITE")
					printf("Press any key to go back to menu.")
					pause()
					goto(@reloadMenuLoop)
				}
			}
		}
	}
	setColor("RED")
	printf("")
	printf("An error occured during file dump, please make sure you have enough space on your SD.")
	printf("")
	setColor("WHITE")
	printf("Press any key to go back to menu.")
	pause()
	goto(@reloadMenuLoop)
}

printf("Restoration begin")
printf("")
@restoreFileExist = setInt(1);
fs_exists($BOOT0Path)
if (@RESULT, ==, 0){
@restoreFileExist = setInt(0);
}
fs_exists($BOOT1Path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
fs_exists($BCPKG1Path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
fs_exists($BCPKG2Path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
fs_exists($BCPKG3Path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
fs_exists($BCPKG4Path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
combineStrings($restoreFolderPath, "/SYSTEM/Contents", $SYSTEM_Contents_path)
fs_exists($SYSTEM_Contents_path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
if (@restoreFileExist, ==, 1){
	fs_openDir($SYSTEM_Contents_path)
	if (@ISDIRVALID, ==, 0){
		@restoreFileExist = setInt(0);
	}
	if (@ISDIRVALID, ==, 0){
		fs_closeDir()
	}
}
combineStrings($restoreFolderPath, "/SYSTEM/save", $SYSTEM_save_path)
fs_exists($SYSTEM_save_path)
if (@RESULT, ==, 0){
	@restoreFileExist = setInt(0);
}
if (@restoreFileExist, ==, 1){
	fs_openDir($SYSTEM_save_path)
	if (@ISDIRVALID, ==, 0){
		@restoreFileExist = setInt(0);
	}
	if (@ISDIRVALID, ==, 1){
		fs_closeDir()
	}
}
if (@restoreFileExist, ==, 0){
	setColor("RED")
	printf("")
	printf("Some folders or files are missing in the ", $restoreFolderPath, "folder, the script can't continue.")
	printf("")
	setColor("WHITE")
	printf("Press any key to go back to menu.")
	pause()
	goto(@reloadMenuLoop)
}
if (@checkInput, ==, 1){
	setColor("RED")
	printf("Warning: All datas on nand will be lost")
	setColor("WHITE")
	printf("")
	printf("Press VOL+ key to confirm or any other keys to go back to menu.")
	pause()
	if (@BTN_VOL+, ==, 0){
		goto(@reloadMenuLoop)
	}
}

if (@mmcTypeWork, ==, 0){
	if (@mmcAlreadyConnected, ==, 0){
		printf("Mounting SYSMMC...") 
		mmc_connect("SYSMMC")
		if (@RESULT){
			setColor("RED")
			printf("The sysnand couldn't be initialized!")
			printf("This may be due to faulty nand or incorrect Bis Keys.")
			printf("If you run this script on a console but the nand doesn't match it, this script can't work either.")
			printf("")
			setColor("WHITE")
			printf("Press any key to go back to menu.")
			pause()
			goto(@reloadMenuLoop)
		}
		@mmcAlreadyConnected = setInt(1)
	}
}
if (@mmcTypeWork, ==, 1){
	if (@mmcAlreadyConnected, ==, 0){
		printf("Mounting EMUMMC...") 
		mmc_connect("EMUMMC")
		if (@RESULT){
			setColor("RED")
			printf("The emunand couldn't be initialized!")
			printf("This may be due to faulty nand or incorrect Bis Keys.")
			printf("If you run this script on a console but the nand doesn't match it, this script can't work either.")
			printf("")
			setColor("WHITE")
			printf("Press any key to go back to menu.")
			pause()
			goto(@reloadMenuLoop)
		}
		@mmcAlreadyConnected = setInt(1)
	}
}
if (@checkInput, <, 3){
	mmc_mount("SYSTEM")
	if (@RESULT){
		setColor("RED")
		printf("SYSTEM partition failed to mount!")
		printf("This may be due to faulty nand or incorrect Bis Keys.")
		printf("If you run this script on a console but the nand doesn't match it, this script can't work either.")
		printf("")
		setColor("WHITE")
		printf("Press any key to go back to menu.")
		pause()
		goto(@reloadMenuLoop)
	}
	mmc_mount("USER")
	if (@RESULT){
		setColor("RED")
		printf("User partition failed to mount!")
		printf("This may be due to faulty nand or incorrect Bis Keys.")
		printf("If you run this script on a console but the nand doesn't match it, this script can't work either.")
		printf("")
		setColor("WHITE")
		printf("Press any key to go back to menu.")
		pause()
		goto(@reloadMenuLoop)
	}
}

printf("")
printf("Restoring BOOT0, BOOT1 and BCPKG2-* partitions...")
printf("")
mmc_restorePart($BOOT0Path)
mmc_restorePart($BOOT1Path)
mmc_restorePart($BCPKG1Path)
mmc_restorePart($BCPKG2Path)
mmc_restorePart($BCPKG3Path)
mmc_restorePart($BCPKG4Path)
if (@checkInput, ==, 3){
	setColor("GREEN")
	printf("")
	printf("")
	printf("Done!")
	printf("")
	setColor("WHITE")
	printf("Press any key to go back to menu.")
	pause()
	goto(@reloadMenuLoop)
}
printf("Restauring SYSTEM partition...")
mmc_mount("SYSTEM")
if (@RESULT){
	setColor("RED")
	printf("System partition failed to mount!")
	printf("")
	setColor("WHITE")
	printf("Press any key to go back to menu.")
	pause()
	goto(@reloadMenuLoop)
}
if (@checkInput, ==, 1){
	fs_delRecursive("emmc:/Contents")
	fs_delRecursive("emmc:/save")
	fs_delRecursive("emmc:/saveMeta")
	fs_del("emmc:/PRF2SAFE.RCV")
}
fs_copyRecursive($SYSTEM_Contents_path, "emmc:/")
fs_copyRecursive($SYSTEM_save_path, "emmc:/")
if (@checkInput, ==, 1){
	printf("")
	printf("Restauring USER partition")
	mmc_mount("USER")
	if (@RESULT){
		setColor("RED")
		printf("User partition failed to mount!")
		printf("")
		setColor("WHITE")
		printf("Press any key to go back to menu.")
		pause()
		goto(@reloadMenuLoop)
	}
	fs_delRecursive("emmc:/Album")
	fs_delRecursive("emmc:/Contents")
	fs_delRecursive("emmc:/save")
	fs_delRecursive("emmc:/saveMeta")
	fs_delRecursive("emmc:/temp")
	fs_del("emmc:/PRF2SAFE.RCV")
	fs_mkdir("emmc:/Album")
	fs_mkdir("emmc:/Contents")
	fs_mkdir("emmc:/Contents/placehld")
	fs_mkdir("emmc:/Contents/registered")
	fs_mkdir("emmc:/save")
	fs_mkdir("emmc:/saveMeta")
	fs_mkdir("emmc:/temp")
}
combineStrings($restoreFolderPath, "/microSD", $microSD_restoreFolderPath)
fs_exists($microSD_restoreFolderPath)
if (@RESULT){
	fs_openDir($microSD_restoreFolderPath)
	if (@ISDIRVALID, ==, 1){
		fs_readDir()
		setString("", $temp_microSD_restore_file)
		@hekateConfigFileFounded = setInt(0)
		combineStrings($microSD_restoreFolderPath, "/", $temp_microSD_restore_file)
		combineStrings($temp_microSD_restore_file, $FILENAME, $temp_microSD_restore_file)
		compareStrings($FILENAME, "hekate_ipl.ini")
		if (@RESULT, ==, 1){
			@hekateConfigFileFounded = setInt(1)
		}
		if (@hekateConfigFileFounded, ==, 1){
			fs_exists("sd:/bootloader")
			if (@RESULT, ==, 0){
				fs_mkdir("sd:/bootloader")
			}
			fs_exists("sd:/bootloader/hekate_ipl.ini")
			if (@RESULT, ==, 1){
				fs_copy("sd:/bootloader/hekate_ipl.ini", "sd:/bootloader/hekate_ipl.ini.bak")
			}
			fs_copy($temp_microSD_restore_file, "sd:/bootloader/hekate_ipl.ini")
		}
		if (@hekateConfigFileFounded, ==, 0){
			setString("", $tempKipFile)
			combineStrings("sd:/", $FILENAME, $tempKipFile)
			fs_copy($temp_microSD_restore_file, $tempKipFile)
		}
		fs_readDir()
		setString("", $temp_microSD_restore_file)
		@hekateConfigFileFounded = setInt(0)
		combineStrings($microSD_restoreFolderPath, "/", $temp_microSD_restore_file)
		combineStrings($temp_microSD_restore_file, $FILENAME, $temp_microSD_restore_file)
		compareStrings($FILENAME, "hekate_ipl.ini")
		if (@RESULT, ==, 1){
			@hekateConfigFileFounded = setInt(1)
		}
		if (@hekateConfigFileFounded, ==, 1){
			fs_exists("sd:/bootloader")
			if (@RESULT, ==, 0){
				fs_mkdir("sd:/bootloader")
			}
			fs_exists("sd:/bootloader/hekate_ipl.ini")
			if (@RESULT, ==, 1){
				fs_copy("sd:/bootloader/hekate_ipl.ini", "sd:/bootloader/hekate_ipl.ini.bak")
			}
			fs_copy($temp_microSD_restore_file, "sd:/bootloader/hekate_ipl.ini")
		}
		if (@hekateConfigFileFounded, ==, 0){
			setString("", $tempKipFile)
			combineStrings("sd:/", $FILENAME, $tempKipFile)
			fs_copy($temp_microSD_restore_file, $tempKipFile)
		}
	}
	fs_closeDir()
}

setColor("GREEN")
printf("")
printf("")
printf("Done!")
printf("")
setColor("WHITE")
printf("Press any key to go back to menu.")
pause()
goto(@reloadMenuLoop)
exit()