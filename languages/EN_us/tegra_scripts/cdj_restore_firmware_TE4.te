#REQUIRE VER 4.0.0
#REQUIRE MINERVA
#REQUIRE KEYS
#REQUIRE SD

wait={t=timer()while(timer()<(t+tw)){print("Wait for",(t+tw-timer()/1000),"seconds \r")}}

main_menu_options = ["Quit without doing anything", "Backup BOOT0, BOOT1, PRODINFO and PRODINFOF", "Restore with data deletion", "Restore without data deletion", "Restore only BOOT0, BOOT1 and BCPKG2-* partitions", "Remove parental control", "Reset console", "Switch script work between SYSNAND and EMUNAND", "Copy controller synchronization settings from SYSNAND to EMUNAND (function in beta)", "Migrate emunand (functions in alpha test)", "Bypass the first configuration"]
migrate_emunand_menu_options = ["Return to main menu", "Make SXOS partition emunand compatible with Atmosphere", "Convert SXOS files emunand  for Atmosphere", "Reverse the conversion of SXOS files emunand  for Atmosphere"]
explorer_menu_options = ["Go back to main menu", "Use this directory", "Go back to the root of the SD", "Go to parent directory"]

clearLine = "                                                                              "
mmcTypeWork = 0
return_code = 0

prepare_paths = {
	if (explorerIsCalled == 1){
		restoreFolderPath = currentFolder
		dumpFolderPath = currentFolder
		currentFolder = "sd:/"
	}
	BOOT0Path = combinepath(restoreFolderPath, "BOOT0.bin")
	BOOT1Path = combinepath(restoreFolderPath, "BOOT1.bin")
	BCPKG1Path = combinepath(restoreFolderPath, "BCPKG2-1-Normal-Main.bin")
	BCPKG2Path = combinepath(restoreFolderPath, "BCPKG2-2-Normal-Sub.bin")
	BCPKG3Path = combinepath(restoreFolderPath, "BCPKG2-3-SafeMode-Main.bin")
	BCPKG4Path = combinepath(restoreFolderPath, "BCPKG2-4-SafeMode-Sub.bin")
	BOOT0DumpPath = combinepath(dumpFolderPath, "BOOT0")
	BOOT1DumpPath = combinepath(dumpFolderPath, "BOOT1")
	PRODINFODumpPath = combinepath(dumpFolderPath, "PRODINFO.bin")
	PRODINFOFDumpPath = combinepath(dumpFolderPath, "PRODINFOF.bin")
}

checkIfImportantSave = {
	importantSaves = ["8000000000000120", "80000000000000d1", "8000000000000047"]
	j = 0
	important = 0
	while (j < importantSaves.len()){
		if (importantSaves[j] == save){
			important = 1
		}
		j = j + 1
	}
}

mount_system = {
	return_code = 0
	if (mmcTypeWork == 0){
		println("Mounting SYSTEM partition on SYSMMC...")
		println("")
		RESULT = mountsys("SYSTEM")
	}
if (mmcTypeWork == 0){
		println("Mounting SYSTEM partition on EMUMMC...")
		println("")
		RESULT = mountemu("SYSTEM")
	}
	if (RESULT) {
		color(0xFF0000)
		println("The SYSTEM partition couldn't be mounted!")
		println("")
		println("This may be due to faulty nand or incorrect Bis Keys.")
		println("If you run this script on a console but the nand doesn't match it, this script can't work either.\n")
		color(0xFFFFFF)
		println("Press any key to go back to menu.")
		pause()
		return_code = 1
	}
}

mount_user = {
	return_code = 0
	if (mmcTypeWork == 0){
		println("Mounting USER partition on SYSMMC...")
		println("")
		RESULT = mountsys("USER")
	}
if (mmcTypeWork == 0){
		println("Mounting USER partition on EMUMMC...")
		println("")
		RESULT = mountemu("USER")
	}
	if (RESULT) {
		color(0xFF0000)
		println("The USER partition couldn't be mounted!")
		println("")
		println("This may be due to faulty nand or incorrect Bis Keys.")
		println("If you run this script on a console but the nand doesn't match it, this script can't work either.\n")
		color(0xFFFFFF)
		println("Press any key to go back to menu.")
		pause()
		return_code = 1
	}
}

main_menu = {
	clear()
	if (mmcTypeWork == 0){
		color(0xFFFFFF)
		println("TegraScript ChoiDuJour  package restoration - SYSMMC")
	}
	if (mmcTypeWork == 1){
		color(0x00FF00)
		println("TegraScript ChoiDuJour  package restoration - EMUMMC")
		color(0xFFFFFF)
	}
	println("By shadow256")
	println("")
	println("Select what you want to do.")
	println("")
	println("")
	printpos(0, 39)
	println("Up/Down/VOL+/VOL- : move selection | A/POWER : validate")
	if (mmcTypeWork == 0){
		println("X : Work on the EMUNAND")
	}
	if (mmcTypeWork == 1){
		println("X : Work on the SYSNAND")
	}

	selection = 1
	maxSelection = main_menu_options.len()
	while (1) {
		printpos(0, 10)
		i = 0
		while (i < maxSelection) {
			color(0xFFFFFF)
			if (i + 1 == selection){
				color(0xFF0000)
			}
			println(main_menu_options[i])
			i = i + 1
		}
		verif_key = pause()
		if (verif_key.down || verif_key.volminus) {
			if (selection < maxSelection){
			selection = selection + 1
			}
		}
		if (verif_key.up || verif_key.volplus) {
			if (selection > 1){
			selection = selection - 1
			}
		}
		if (verif_key.x) {
			selection = 8
			break()
		}
		if (verif_key.a || verif_key.power) {
			break()
		}
	}
	main_action = selection
	# return()
}

migrate_emunand_menu_choice = {
	clear()
	println("Migrate emunand")
	println("")
	println("Select what you want to do.")
	println("")
	println("")
	printpos(0, 39)
	println("Up/Down/VOL+/VOL- : move selection | A/POWER : validate")

	selection = 1
	maxSelection = migrate_emunand_menu_options.len()
	while (1) {
		printpos(0, 10)
		i = 0
		while (i < maxSelection) {
			color(0xFFFFFF)
			if (i + 1 == selection){
				color(0xFF0000)
			}
			println(migrate_emunand_menu_options[i])
			i = i + 1
		}
		verif_key = pause()
		if (verif_key.down || verif_key.volminus) {
			if (selection < maxSelection){
			selection = selection + 1
			}
		}
		if (verif_key.up || verif_key.volplus) {
			if (selection > 1){
			selection = selection - 1
			}
		}
		if (verif_key.a || verif_key.power) {
			break()
		}
	}
	# return()
}

migrate_emunand_menu = {
	while (1) {
		migrate_emunand_menu_choice()
		if (selection == 1){
			break()
		}
		if (selection == 2){
			break()
			prepare_sxos_emunand_partition_for_atmosphere()
		}
		if (selection == 3){
			break()
			convert_emunand_files_sxos_for_atmosphere()
		}
		if (selection == 4){
			break()
			invert_emunand_files_sxos_for_atmosphere()
		}
	}
	# return()
}

prepare_sxos_emunand_partition_for_atmosphere = {
	clear()
	if (fsexists("sd:/emummc") == 0){
		deldir("sd:/emummc")
	}
	if (fsexists("sd:/emummc/emummc.ini")){
		delfile("sd:/emummc/emummc.ini")
	}
	writefile("sd:/emummc/emummc.ini", byte([0x5B, 0x65, 0x6D, 0x75, 0x6D, 0x6D, 0x63, 0x5D, 0x0D, 0x0A, 0x65, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x64, 0x3D, 0x31, 0x0D, 0x0A, 0x73, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3D, 0x30, 0x78, 0x32, 0x0D, 0x0A, 0x70, 0x61, 0x74, 0x68, 0x3D, 0x65, 0x6D, 0x75, 0x4D, 0x4D, 0x43, 0x2F, 0x45, 0x52, 0x30, 0x30, 0x0D, 0x0A, 0x69, 0x64, 0x3D, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x6E, 0x64, 0x6F, 0x5F, 0x70, 0x61, 0x74, 0x68, 0x3D, 0x45, 0x6D, 0x75, 0x74, 0x65, 0x6E, 0x64, 0x6F, 0x0D, 0x0A]))
	if (fsexists("sd:/emummc/ER00")) {
		deldir("sd:/emummc/ER00")
	}
	mkdir("sd:/emummc/ER00")
	writefile("sd:/emummc/ER00/raw_based", byte([0x02]))
	color(0x00FF00)
	println("Operation successfully completed.")
	color(0xFFFFFF)
	println("")
	println("Press any key to close the script.")
	pause()
	exit()
}

convert_emunand_files_sxos_for_atmosphere = {
	clear()
	emunand_file_check = 0
	if (fsexists("sd:/sxos/emunand/boot0.bin") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/emunand/boot1.bin") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/emunand/full.00.bin") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/emunand/full.01.bin") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/emunand/full.02.bin") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/emunand/full.03.bin") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/emunand/full.04.bin") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/emunand/full.05.bin") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/emunand/full.06.bin") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/emunand/full.07.bin") == 0) {
		emunand_file_check = 1
	}
	if (emunand_file_check == 1) {
		println("Impossible to perform the conversion, one or more files of the SXOS emunand seem to be missing.")
		println("")
		println("Press any key to go back to main menu.")
		pause()
		# return()
	} .else() {
		if (fsexists("sd:/sxos/eMMC") == 0) {
			mkdir("sd:/sxos/eMMC")
		}
		movefile("sd:/sxos/emunand/boot0.bin", "sd:/sxos/eMMC/boot0")
		movefile("sd:/sxos/emunand/boot1.bin", "sd:/sxos/eMMC/boot1")
		movefile("sd:/sxos/emunand/full.00.bin", "sd:/sxos/eMMC/00")
		movefile("sd:/sxos/emunand/full.01.bin", "sd:/sxos/eMMC/01")
		movefile("sd:/sxos/emunand/full.02.bin", "sd:/sxos/eMMC/02")
		movefile("sd:/sxos/emunand/full.03.bin", "sd:/sxos/eMMC/03")
		movefile("sd:/sxos/emunand/full.04.bin", "sd:/sxos/eMMC/04")
		movefile("sd:/sxos/emunand/full.05.bin", "sd:/sxos/eMMC/05")
		movefile("sd:/sxos/emunand/full.06.bin", "sd:/sxos/eMMC/06")
		movefile("sd:/sxos/emunand/full.07.bin", "sd:/sxos/eMMC/07")
		if (fsexists("sd:/emummc") == 0){
			deldir("sd:/emummc")
		}
		if (fsexists("sd:/emummc/emummc.ini")){
			delfile("sd:/emummc/emummc.ini")
		}
		writefile("sd:/emummc/emummc.ini", byte([0x5B, 0x65, 0x6D, 0x75, 0x6D, 0x6D, 0x63, 0x5D, 0x0D, 0x0A, 0x65, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x64, 0x3D, 0x31, 0x0D, 0x0A, 0x73, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3D, 0x30, 0x78, 0x30, 0x0D, 0x0A, 0x70, 0x61, 0x74, 0x68, 0x3D, 0x73, 0x78, 0x6F, 0x73, 0x0D, 0x0A, 0x69, 0x64, 0x3D, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x0D, 0x0A, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x6E, 0x64, 0x6F, 0x5F, 0x70, 0x61, 0x74, 0x68, 0x3D, 0x45, 0x6D, 0x75, 0x74, 0x65, 0x6E, 0x64, 0x6F, 0x0D, 0x0A]))
		deldir("sd:/sxos/emunand")
		color(0x00FF00)
		println("Operation successfully completed.")
		color(0xFFFFFF)
		println("")
		println("Press any key to close the script.")
		pause()
		exit()
	}
}

invert_emunand_files_sxos_for_atmosphere = {
	clear()
	emunand_file_check = 0
	if (fsexists("sd:/sxos/eMMC/boot0") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/eMMC/boot1") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/eMMC/00") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/eMMC/01") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/eMMC/02") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/eMMC/03") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/eMMC/04") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/eMMC/05") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/eMMC/06") == 0) {
		emunand_file_check = 1
	}
	if (fsexists("sd:/sxos/eMMC/07") == 0) {
		emunand_file_check = 1
	}
	if (emunand_file_check == 1) {
		println("Impossible to perform the conversion, one or more files of the Atmosphere emunand seem to be missing.")
		println("")
		println("Press any key to go back to main menu.")
		pause()
		# return()
	} .else() {
		if (fsexists("sd:/sxos/emunand") == 0) {
			mkdir("sd:/sxos/emunand")
		}
		movefile("sd:/sxos/eMMC/boot0", "sd:/sxos/emunand/boot0.bin")
		movefile("sd:/sxos/eMMC/boot1", "sd:/sxos/emunand/boot1.bin")
		movefile("sd:/sxos/eMMC/00", "sd:/sxos/emunand/full.00.bin")
		movefile("sd:/sxos/eMMC/01", "sd:/sxos/emunand/full.01.bin")
		movefile("sd:/sxos/eMMC/02", "sd:/sxos/emunand/full.02.bin")
		movefile("sd:/sxos/eMMC/03", "sd:/sxos/emunand/full.03.bin")
		movefile("sd:/sxos/eMMC/04", "sd:/sxos/emunand/full.04.bin")
		movefile("sd:/sxos/eMMC/05", "sd:/sxos/emunand/full.05.bin")
		movefile("sd:/sxos/eMMC/06", "sd:/sxos/emunand/full.06.bin")
		movefile("sd:/sxos/eMMC/07", "sd:/sxos/emunand/full.07.bin")
		deldir("sd:/sxos/eMMC")
		if (fsexists("sd:/emummc/emummc.ini")){
			delfile("sd:/emummc/emummc.ini")
		}
		color(0x00FF00)
		println("Operation successfully completed.")
		color(0xFFFFFF)
		println("")
		println("Press any key to close the script.")
		pause()
		exit()
	}
}

switch_working_nand = {
	if (mmcTypeWork == 0){
		if (emu() != 1){
		clear()
		println("No EMUNAND configured on the SD, the SYSNAND will continue to be used.")
		println("Press any key to go back to menu.")
		pause()
		# return()
	} .else() {
			mmcTypeWork = 1
			# return()
		}
	} .else() {
		if (mmcTypeWork == 1){
			mmcTypeWork = 0
			# return()
		}
	}
	# return()
}

bypass_first_configuration={
	mount_system()
	if (return_code != 1) {
		save = readsave("bis:/save/8000000000000050")
		save_file = save.read("file")
		save_file[0x29484] = 1
		save.write("file", save_file)
		save.commit()
		save = ""
		save_file = ""
		color(0x00FF00)
		println("Operation successfully completed.")
		color(0xFFFFFF)
		println("")
		println("Press any key to go back to menu.")
		pause()
		# return()
	}
}

synch_joycons={
	if (emu() != 1){
		color(0xFF0000)
		println("No emunand configured on the SD, it's not possible to continue.")
		println("")
		println("Press any key to go back to menu.")
		pause()
		# return()
	} .else() {
		color(0x0000FF)
		println("TegraScript Syncfixby MezBar")
		println("Ported to TegraScript v2 by Neville_Shorttop")
		# https://gbatemp.net/threads/guide-pairing-the-joy-con-on-emunand-and-sysnand.562519/
		println("Modified by shadow256")
		println("")
		color("YELLOW")
		println("This script will correct the joysticks synchronization problems between the SYSMMC and the EMUMMC")
		println("Before using this script, connect all your controllers to the SYSMMC")
		println("")
		color(0xFF0000)
		println("If you use 90DNS or any other DNS setting,")
		println("please switch to airplane mode on the SYSMMC")
		println("and the EMUMMC cause this script will copy")
		println("also the wifi settings from your SYSMMC to the EMUMMC.")
		println("")
		println("Also note that some of your emunand settings will be overwritten,")
		println("such as the theme, so check the parameters of the emunand")
		println("after the execution of this script.")
		wait(tw = 5000)
		println("")
		println("Press 'VOL+' to start the synchronization of the SYSMMC to the EMUMMC")
		println("")
		verif_key = pause()
		if (verif_key.volplus){
			temp_mmcTypeWork = mmcTypeWork
			mmcTypeWork = 0
			mount_system()
		if (return_code != 1) {
				mkdir("sd:/tegraexplorer")
				mkdir("sd:/tegraexplorer/syncfix")
				println("Saving the '8000000000000050' file from the SYSMMC to the 'sd:/tegraexplorer/syncfix' folder")
				copyfile("bis:/save/8000000000000050", "sd:/tegraexplorer/syncfix/8000000000000050_sysmmc_backup")
				mmcTypeWork = 1
				mount_system()
				if (return_code != 1) {
					println("Saving the '8000000000000050' file from the EMUMMC to the 'sd:/tegraexplorer/syncfix' folder")
					println("")
					copyfile("bis:/save/8000000000000050", "sd:/tegraexplorer/syncfix/8000000000000050_emummc_backup")
					println("Copying the '8000000000000050' file from the SYSMMC to the EMUMMC")
					println("")
					copyfile("sd:/tegraexplorer/syncfix/8000000000000050_sysmmc_backup", "bis:/save/8000000000000050")
					mmcTypeWork = temp_mmcTypeWork
					color(0x00FF00)
					println("Operation completed!")
					println("")
					println("Now your controllers should be synchronized between the SYSMMC and the EMUMMC")
					println("")
					color(0xFFFFFF)
					println("Press any key to go back to menu.")
					pause()
					# return()
				}
			}
		}
	}
}

del_parental_control = {
	clear()
	println("Remove the parental control")
	println("")
	println("Press VOL+ to remove the parental control or press any other keys to go back to menu")
	println("")
	verif_key = pause()
	if (verif_key.volplus){
		mount_system()
		if (return_code != 1) {
			println("Deleting parental control")
			delfile("bis:/save/8000000000000100")
			color(0x00FF00)
			println("")
			println("")
			println("Done! press any key to return to menu.")
			pause()
			# return()
		}
	}
}

wip_console_data = {
	clear()
	println("Remove all datas")
	println("")
	println("Press VOL+ to remove all datas or press any other keys to go back to menu")
	println("")
	verif_key = pause()
	if (verif_key.volplus){
		println("Deleting datas")
		println("")
		mount_system()
		if (return_code != 1) {
			println("Deleting datas from SYSTEM partition")
			println("")
			deldir("bis:/saveMeta")
			mkdir("bis:/saveMeta")
			files = readdir("bis:/save")
			i = 0
			color(0xFF0000)
			while (i < files.files.len()) {
				save = files.files[i]
				checkIfImportantSave()
				if (!important){
					print("\rDeleting ", save)
					res = delfile(combinepath("bis:/save", save))
					if (res) {
						println("\nThe file ", save, " deletion has failed!")
						# pause()
						# return()
					}
				}
				i = i + 1
			}
		}
		color(0xFFFFFF)
		mount_user()
		if (return_code != 1) {
			println("Deleting datas from USER partition")
			println("")
			color(0xFF0000)
			toDel = ["Album", "Contents", "save", "saveMeta", "temp"]
			i = 0
			while (i < toDel.len()){
				deldir(combinepath("bis:/", toDel[i]))
				mkdir(combinepath("bis:/", toDel[i]))
				i = i + 1
			}
			mkdir("bis:/Contents/placehld")
			mkdir("bis:/Contents/registered")
		}
		color(0x00FF00)
		println("")
		println("")
		println("Operation successfully completed, press any key to return to the menu.")
		pause()
		# return()
	}
}

explorer_menu_init = {
	clear()
	color(0xFFFFFF)
	println(explorerTitle)
	println("-------------------------------------------------------------------------------")
	printpos(0, 40)
	println("Up/Down/Left/Right/VOL+/VOL- : Move into menu | A/POWER : Validate")
	println("B : Parent folder | X : Reload folder | Y : Back to SD root")
	printpos(0, 3)
	if (((currentFolder == "sd:/") == 0) || ((currentFolder == "sd:") == 0)) {
		parentDir = escapepath(currentFolder)
	} .else() {
		noParentDir = 1
		parentDir = "sd:/"
		currentFolder = "sd:/"
	}
	file = readdir(currentFolder)
	folder_list = []
	i = 0
	while (i < file.folders.len()) {
		folder_list = folder_list + file.folders[i]
		i = i + 1
	}
	foldersNumber = folder_list.len()
	selectedFolder = ""
	minIndexToPrint = 1
	maxIndexToPrint = explorer_menu_options.len()
	firstLineDisplay = 3
	middleLineDisplabreak()6
	lastLineDisplay = 35
	maxSelection = maxIndexToPrint + foldersNumber
	firstLine = minIndexToPrint
	middleLineDesc = middleLineDisplay + minIndexToPrint
	middleLineAsc = maxSelection - middleLineDisplay
	lastLine = lastLineDisplay + minIndexToPrint
	firstLineLimit = firstLine
	middleLineDescLimit = middleLineDesc
	middleLineAscLimit = middleLineAsc
	middleLineLimit = middleLineAsc - middleLineDesc
	lastLineLimit = lastLine
	selection = minIndexToPrint
	# return()
}

explorer_menu_choice = {
	while (1) {
		printpos(0, firstLineDisplay)
		printedLine = firstLineDisplay
		i = firstLine - 1
		while (i < maxIndexToPrint){
			color(0x00FF00)
			if (i + 1 == selection){
				color(0xFF0000)
			}
			# println("")
			# printpos(0, printedLine)
			println(explorer_menu_options[i])
			printedLine = printedLine + 1
			i = i + 1
		}
		# if (i == maxIndexToPrint) {
			# println("")
			# printedLine = printedLine + 1
		# }
		count = maxIndexToPrint
		j = 0
		while ((i + j < lastLine) && (j < foldersNumber)) {
			color(0xFFFFFF)
			count = count + 1
			if (count >= firstLine){
				if (i + j + 1 == selection){
					selectedFolder = folder_list[j]
					printpos(0, 38)
					print(clearLine)
					printpos(0, 38)
					color(0x00FF00)
					println(folder_list[j])
					printpos(0, printedLine)
					color(0xFF0000)
				}
				# println("")
				# printpos(0, printedLine)
				println(folder_list[j])
				printedLine = printedLine + 1
				j = j + 1
			}
		}
		println("-------------------------------------------------------------------------------")
		println("")
		color(0x00FF00)
		println(currentFolder)
		color(0xFFFFFF)
		verif_key = pause()
		if (verif_key.down || verif_key.volminus) {
			if (selection < maxSelection){
				selection = selection + 1
			}
			if (selection > middleLineDesc){
				if (selection <= middleLineAsc){
					firstLine = firstLine + 1
					lastLine = lastLine + 1
				}
			}
		}
		if (verif_key.up || verif_key.volplus) {
			if (selection > minIndexToPrint){
				selection = selection - 1
			}
			if (selection < middleLineAsc){
				if (selection >= middleLineDesc){
					firstLine = firstLine - 1
					lastLine = lastLine - 1
				}
			}
		}
		if (verif_key.left) {
			if (selection > minIndexToPrint){
				selection = selection - middleLineDisplay
				if (selection < minIndexToPrint){
					selection = minIndexToPrint
				}
			}
			if (selection < middleLineAsc){
				if (selection >= middleLineDesc){
					firstLine = firstLine - middleLineDisplay
					lastLine = lastLine - middleLineDisplay
				}
				if (selection < middleLineDesc){
					firstLine = minIndexToPrint
					lastLine = lastLineLimit
				}
			}
		}
		if (verif_key.right) {
			if (selection < maxSelection){
				selection = selection + middleLineDisplay
				if (selection > maxSelection){
					selection = maxSelection
				}
			}
			if (selection > middleLineDesc){
				if (selection <= middleLineAsc){
					firstLine = firstLine + middleLineDisplay
					lastLine = lastLine + middleLineDisplay
				}
				if (selection > middleLineAsc){
					firstLine = maxSelection - lastLineDisplay
					lastLine = maxSelection
				}
			}
		}
		if (verif_key.b) {
			selection = 4
			break()
		}
		if (verif_key.y) {
			selection = 3
			break()
		}
		if (verif_key.x) {
			selection = 0
			break()
		}
		if (verif_key.a || verif_key.power) {
			break()
		}
	}
	# return()
}

explorer_menu = {
	currentFolder = "sd:/"
	while (1) {
		explorer_menu_init()
		explorer_menu_choice()
		if (selection == 1){
			return_code = -1
			# return()
		}
		if (selection == 3){
			currentFolder = "sd:/"
		}
		if (selection == 4){
			currentFolder = parentDir
		}
		if (selection > 4){
			currentFolder = combinepath(currentFolder, selectedFolder)
		}
		if (selection == 2){
			break()
		}
	}
	# return()
}

dump_important_partitions = {
	clear()
	# println("Press VOL+ key to save the files in a chosen folder")
	# println("Press any other keys  to save the files in the folder ", dumpFolderPath)
	# verif_key = pause()
	# if (verif_key.volplus){
		# explorerTitle = "select the save folder"
		# explorerIsCalled = 1
		# explorer_menu()
		# if (return_code == -1){
			# return()
		# }
	# }
	prepare_paths()
	println("Begining of the save on the SD card")
	dumpFileExist = 0
	return_code = 0
	RESULT = fsexists(BOOT0DumpPath)
	if (RESULT){
		dumpFileExist = 1
	}
	RESULT = fsexists(BOOT1DumpPath)
	if (RESULT){
		dumpFileExist = 1
	}
	RESULT = fsexists(PRODINFODumpPath)
	if (RESULT){
		dumpFileExist = 1
	}
	RESULT = fsexists(PRODINFOFDumpPath)
	if (RESULT){
		dumpFileExist = 1
	}
	if (dumpFileExist == 1){
		color(0xFF0000)
		println("")
		println("Dump files already exist in the ", dumpFolderPath, " folder, do you want to replace them?")
		println("")
		color(0xFFFFFF)
		println("Press VOL+ to confirm the deletion or any other key to return to the menu.")
		verif_key = pause()
		if (verif_key.volplus){
			delfile(BOOT0DumpPath)
			delfile(BOOT1DumpPath)
			delfile(PRODINFODumpPath)
			delfile(PRODINFOFDumpPath)
		} .else() {
			return_code = 1
		}
	}
	if (return_code == 0) {
		println("")
		println("Backup in progress...")
		mkdir(dumpFolderPath)
		if (mmcTypeWork == 0){
			emmcread(BOOT0DumpPath, "BOOT0")
			emmcread(BOOT1DumpPath, "BOOT1")
			emmcread(PRODINFODumpPath, "PRODINFO")
			emmcread(PRODINFOFDumpPath, "PRODINFOF")
		}
		if (mmcTypeWork == 1){
			emummcread(BOOT0DumpPath, "BOOT0")
			emummcread(BOOT1DumpPath, "BOOT1")
			emummcread(PRODINFODumpPath, "PRODINFO")
			emummcread(PRODINFOFDumpPath, "PRODINFOF")
		}
		BOOT0DumpFileExist = 0
		BOOT1DumpFileExist = 0
		PRODINFODumpFileExist = 0
		PRODINFOFDumpFileExist = 0
		RESULT = fsexists(BOOT0DumpPath)
		if (RESULT){
			BOOT0DumpFileExist = 1
		}
		RESULT = fsexists(BOOT1DumpPath)
		if (RESULT){
			BOOT1DumpFileExist = 1
		}
		RESULT = fsexists(PRODINFODumpPath)
		if (RESULT){
			PRODINFODumpFileExist = 1
		}
		RESULT = fsexists(PRODINFOFDumpPath)
		if (RESULT){
			PRODINFOFDumpFileExist = 1
		}
		if (BOOT0DumpFileExist == 1 && BOOT1DumpFileExist == 1 && PRODINFODumpFileExist == 1 && PRODINFOFDumpFileExist == 1){
			color(0x00FF00)
			println("")
			println("")
			println("Backup finished, the files are in the ", dumpFolderPath, " folder, remember to keep them somewhere.")
			println("")
			color(0xFFFFFF)
			println("Press any key to go back to menu.")
			pause()
			# return()
		} .else() {
			color(0xFF0000)
			println("")
			println("An error occurred during the backup, check the available space on your SD.")
			println("")
			color(0xFFFFFF)
			println("Press any key to go back to menu.")
			pause()
			# return()
		}
	}
}

restore_file_verif= {
	return_code = 0
	restoreFileExist = 1
	RESULT = fsexists(BOOT0Path)
	if (RESULT == 0){
	restoreFileExist = 0
	}
	RESULT = fsexists(BOOT1Path)
	if (RESULT == 0){
		restoreFileExist = 0
	}
	RESULT = fsexists(BCPKG1Path)
	if (RESULT == 0){
		restoreFileExist = 0
	}
	RESULT = fsexists(BCPKG2Path)
	if (RESULT == 0){
		restoreFileExist = 0
	}
	RESULT = fsexists(BCPKG3Path)
	if (RESULT == 0){
		restoreFileExist = 0
	}
	RESULT = fsexists(BCPKG4Path)
	if (RESULT == 0){
		restoreFileExist = 0
	}
	SYSTEM_Contents_path = combinepath(restoreFolderPath, "SYSTEM/Contents")
	RESULT = fsexists(SYSTEM_Contents_path)
	if (RESULT == 0){
		restoreFileExist = 0
	}
	if (restoreFileExist == 1){
		RESULT = readdir(SYSTEM_Contents_path)
		if (RESULT.files.len() == 0){
			restoreFileExist = 0
		}
	}
	SYSTEM_save_path = combinepath(restoreFolderPath, "SYSTEM/save")
	RESULT = fsexists(SYSTEM_save_path)
	if (RESULT == 0){
		restoreFileExist = 0
	}
	if (restoreFileExist == 1){
		RESULT = readdir(SYSTEM_save_path)
		if (RESULT.files.len() == 0){
			restoreFileExist = 0
		}
	}
	if (restoreFileExist == 0){
		color(0xFF0000)
		println("")
		println("Some files or folders are missing in the ", restoreFolderPath, " folder, the script couldn't continue.")
		println("")
		color(0xFFFFFF)
		println("Press any key to go back to menu.")
		pause()
		return_code = 1
	}
}

restore_boot_and_bcpkg_partitions = {
	println("Restauring BOOT0, BOOT1 and BCPKG2-* partitions...")
	println("")
	if (mmcTypeWork == 0){
		emmcwrite(BOOT0Path, "BOOT0")
		emmcwrite(BOOT1Path, "BOOT1")
		emmcwrite(BCPKG1Path, "BCPKG2-1-Normal-Main")
		emmcwrite(BCPKG2Path, "BCPKG2-2-Normal-Sub")
		emmcwrite(BCPKG3Path, "BCPKG2-3-SafeMode-Main")
		emmcwrite(BCPKG4Path, "BCPKG2-4-SafeMode-Sub")
	}
	if (mmcTypeWork == 1){
		emummcwrite(BOOT0Path, "BOOT0")
		emummcwrite(BOOT1Path, "BOOT1")
		emummcwrite(BCPKG1Path, "BCPKG2-1-Normal-Main")
		emummcwrite(BCPKG2Path, "BCPKG2-2-Normal-Sub")
		emummcwrite(BCPKG3Path, "BCPKG2-3-SafeMode-Main")
		emummcwrite(BCPKG4Path, "BCPKG2-4-SafeMode-Sub")
	}
}

restore_system_partition = {
	println("Restauring SYSTEM partition...")
	mount_system()
	deldir("bis:/Contents")
	if (method_restore == 1){
		deldir("bis:/save")
		deldir("bis:/saveMeta")
		delfile("bis:/PRF2SAFE.RCV")
	}
	copydir(SYSTEM_Contents_path, "bis:/")
	copydir(SYSTEM_save_path, "bis:/")
}

restore_user_partition = {
	println("Restauring USER partition...")
	deldir("bis:/Album")
	deldir("bis:/Contents")
	deldir("bis:/save")
	deldir("bis:/saveMeta")
	deldir("bis:/temp")
	delfile("bis:/PRF2SAFE.RCV")
	mkdir("bis:/Album")
	mkdir("bis:/Contents")
	mkdir("bis:/Contents/placehld")
	mkdir("bis:/Contents/registered")
	mkdir("bis:/save")
	mkdir("bis:/saveMeta")
	mkdir("bis:/temp")
}

restore_choidujour_special_files = {
	microSD_restoreFolderPath = combinepath(restoreFolderPath, "microSD")
	RESULT = fsexists(microSD_restoreFolderPath)
	if (RESULT){
		file = readdir(microSD_restoreFolderPath)
		i = 0
		while (i < file.files.len()){
			temp_microSD_restore_file = ""
			hekateConfigFileFounded = 0
			temp_microSD_restore_file = combinepath(temp_microSD_restore_file, file.files[i])
			if (file.files[i] == "hekate_ipl.ini"){
				hekateConfigFileFounded = 1
			}
			if (hekateConfigFileFounded == 1){
				RESULT = fsexists("sd:/bootloader")
				if (RESULT == 0){
					mkdir("sd:/bootloader")
				}
				RESULT = fsexists("sd:/bootloader/hekate_ipl.ini")
				if (RESULT == 1){
					copyfile("sd:/bootloader/hekate_ipl.ini", "sd:/bootloader/hekate_ipl.ini.bak")
				}
				copyfile(temp_microSD_restore_file, "sd:/bootloader/hekate_ipl.ini")
			}
			if (hekateConfigFileFounded == 0){
				tempKipFile = ""
				tempKipFile = combinepath("sd:/", file.files[i])
				copyfile(temp_microSD_restore_file, tempKipFile)
			}
			i = i + 1
		}
	}
}

choidujour_package_restore = {
	clear()
	# println("Press VOL+ key to select the folder containing ChoiDuJour package")
	# println("Press any other keys to  use the  ChoiDuJour package in the folder ", restoreFolderPath)
	# verif_key = pause()
	# if (verif_key.volplus){
		# explorerTitle = "Select the  ChoiDuJour package folder"
		# explorerIsCalled = 1
		# explorer_menu()
		# if (return_code == -1){
			# return()
		# }
	# }
	prepare_paths()
	restore_file_verif()
	if (return_code != 1){
		println("Begining of the restoration")
		println("")
		if (method_restore == 1){
			mount_system()
			if (return_code != 1){
				mount_user()
				if (return_code != 1){
					color(0xFF0000)
					println("Warning: All data in the nand will be lost")
					color(0xFFFFFF)
					println("")
					println("Press VOL+ to confirm or any other key to return to the menu.")
					verif_key = pause()
					if (verif_key.volplus){
						println("")
						restore_boot_and_bcpkg_partitions()
						println("")
						restore_system_partition()
						println("")
						restore_user_partition()
						println()
						restore_choidujour_special_files()
					}
				}
			}
		}

		if (method_restore == 2){
			mount_system()
			if (return_code != 1){
				println("")
				restore_boot_and_bcpkg_partitions()
				println("")
				restore_system_partition()
			}
		}

		if (method_restore == 3){
			restore_boot_and_bcpkg_partitions()
		}

		color(0x00FF00)
		println("")
		println("")
		println("Opperation successfully completed!")
		println("")
		color(0xFFFFFF)
		if (method_restore == 3){
			if (fsexists("sd:/payloads/TegraExplorer.bin") || fsexists("sd:/bootloader/payloads/TegraExplorer.bin")) {
				println("Press VOL+ to restart TegraExplorer or any other key to return to the menu.")
				verif_key = pause()
				if (verif_key.volplus){
					if (fsexists("sd:/payloads/TegraExplorer.bin")) {
						payload("sd:/payloads/TegraExplorer.bin")
					}
					if (fsexists("sd:/bootloader/payloads/TegraExplorer.bin")) {
						payload("sd:/bootloader/payloads/TegraExplorer.bin")
					}
				}
			} .else() {
				println("Press any key to go back to menu.")
			}
		} .else() {
			println("Press any key to go back to menu.")
		}
		pause()
	}
}

while (1) {
	main_action = 0
	explorerIsCalled = 0
	restoreFolderPath = "sd:/cdj_package_files"
	dumpFolderPath = "sd:/dump"
	main_menu()
	if (main_action == 1){
		break()
	}
	if (main_action == 2){
		dump_important_partitions()
	}
	if (main_action == 3){
		choidujour_package_restore(method_restore = 1)
	}
	if (main_action == 4){
		choidujour_package_restore(method_restore = 2)
	}
	if (main_action == 5){
		choidujour_package_restore(method_restore = 3)
	}
	if (main_action == 6){
		del_parental_control()
	}
	if (main_action == 7){
		wip_console_data()
	}
	if (main_action == 8){
		switch_working_nand()
	}
	if (main_action == 9){
		synch_joycons()
	}
	if (main_action == 10){
		migrate_emunand_menu()
	}
	if (main_action == 11){
		bypass_first_configuration
	}
}
exit()